<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TianShuai &prime;s Blog]]></title>
  <link href="http://tianshuai.github.io/atom.xml" rel="self"/>
  <link href="http://tianshuai.github.io/"/>
  <updated>2013-09-02T19:42:37+08:00</updated>
  <id>http://tianshuai.github.io/</id>
  <author>
    <name><![CDATA[TianShuai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby之面向对象]]></title>
    <link href="http://tianshuai.github.io/blog/2013/08/30/rubyzhi-mian-xiang-dui-xiang/"/>
    <updated>2013-08-30T17:05:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/08/30/rubyzhi-mian-xiang-dui-xiang</id>
    <content type="html"><![CDATA[<h4>面向对象的三个基本特征是：封装、继承、多态。</h4>

<p style="text-align:center;"> <img src="http://tianshuai.github.io/images/ruby/o_OOBase.gif" alt="o_OOBase.gif" /></p>

<h4>封装</h4>

<p><em>封装，保证对象自身数据的完整性、安全性</em></p>

<h4>继承</h4>

<p><em>建立类之间的关系，实现代码复用、方便系统的扩展</em></p>

<ul>
<li>继承概念的实现方式有三类：实现继承、接口继承和可视继承。<br/>
Ø  实现继承是指使用基类的属性和方法而无需额外编码的能力；<br/>
Ø  接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；<br/>
Ø  可视继承是指子窗体（类）使用基窗体（类）的外观和实现代码的能力。</li>
<li>在考虑使用继承时，有一点需要注意，那就是两个类之间的关系应该是“属于”关系。例如，Employee 是一个人，Manager 也是一个人，因此这两个类都可以继承 Person 类。但是 Leg 类却不能继承 Person 类，因为腿并不是一个人。</li>
<li>抽象类仅定义将由子类创建的一般属性和方法，创建抽象类时，请使用关键字 Interface 而不是 Class。</li>
<li>OO开发范式大致为：划分对象→抽象类→将类组织成为层次化结构(继承和合成) →用类与实例进行设计和实现几个阶段。</li>
</ul>


<h4>多态</h4>

<p><em>相同的方法调用可实现不同的实现方式</em></p>

<ul>
<li>实现多态，有二种方式，覆盖，重载。</li>
<li>覆盖，是指子类重新定义父类的虚函数的做法。</li>
<li>重载，是指允许存在多个同名函数，而这些函数的参数表不同（或许参数个数不同，或许参数类型不同，或许两者都不同）。</li>
</ul>


<!--more-->


<p>&emsp;&emsp;其实，重载的概念并不属于“面向对象编程”，重载的实现是：编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就成了不同的函数（至少对于编译器来说是这样的）。如，有两个同名函数：function func(p:integer):integer;和function func(p:string):integer;。那么编译器做过修饰后的函数名称可能是这样的：int_func、str_func。对于这两个函数的调用，在编译器间就已经确定了，是静态的（记住：是静态）。也就是说，它们的地址在编译期就绑定了（早绑定），因此，重载和多态无关！真正和多态相关的是“覆盖”。当子类重新定义了父类的虚函数后，父类指针根据赋给它的不同的子类指针，动态（记住：是动态！）的调用属于子类的该函数，这样的函数调用在编译期间是无法确定的（调用的子类的虚函数的地址无法给出）。因此，这样的函数地址是在运行期绑定的（晚邦定）。结论就是：重载只是一种语言特性，与多态无关，与面向对象也无关！引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚邦定，它就不是多态。”</p>

<p>&emsp;&emsp;那么，多态的作用是什么呢？我们知道，封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）；它们的目的都是为了——代码重用。而多态则是为了实现另一个目的——接口重用！多态的作用，就是为了类在继承和派生的时候，保证使用“家谱”中任一类的实例的某一属性时的正确调用。
其实，重载的概念并不属于“面向对象编程”，重载的实现是：编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就成了不同的函数（至少对于编译器来说是这样的）。如，有两个同名函数：function func(p:integer):integer;和function func(p:string):integer;。那么编译器做过修饰后的函数名称可能是这样的：int_func、str_func。对于这两个函数的调用，在编译器间就已经确定了，是静态的（记住：是静态）。也就是说，它们的地址在编译期就绑定了（早绑定），因此，重载和多态无关！真正和多态相关的是“覆盖”。当子类重新定义了父类的虚函数后，父类指针根据赋给它的不同的子类指针，动态（记住：是动态！）的调用属于子类的该函数，这样的函数调用在编译期间是无法确定的（调用的子类的虚函数的地址无法给出）。因此，这样的函数地址是在运行期绑定的（晚邦定）。结论就是：重载只是一种语言特性，与多态无关，与面向对象也无关！引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚邦定，它就不是多态。”
那么，多态的作用是什么呢？我们知道，封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）；它们的目的都是为了——代码重用。而多态则是为了实现另一个目的——接口重用！多态的作用，就是为了类在继承和派生的时候，保证使用“家谱”中任一类的实例的某一属性时的正确调用。</p>

<hr />

<h3>ruby中的面向对象</h3>

<h4>封装</h4>

<ul>
<li>封装没什么可说的</li>
</ul>


<h4>继承与多态</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span> <span class="nb">name</span><span class="p">,</span><span class="n">age</span><span class="o">=</span><span class="mi">18</span> <span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>    <span class="vi">@motherland</span> <span class="o">=</span> <span class="s2">&quot;China&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">talk</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;my name is &quot;</span><span class="o">+</span><span class="vi">@name</span><span class="o">+</span><span class="s2">&quot;, age is &quot;</span><span class="o">+</span><span class="vi">@age</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@motherland</span> <span class="o">==</span> <span class="s2">&quot;China&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;I am a Chinese.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;I am a foreigner.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_writer</span> <span class="ss">:motherland</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="no">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">talk</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;I am a student. my name is &quot;</span><span class="o">+</span><span class="vi">@name</span><span class="o">+</span><span class="s2">&quot;, age is &quot;</span><span class="o">+</span><span class="vi">@age</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Worker</span> <span class="o">&lt;</span> <span class="no">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">talk</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;I am a worker. my name is &quot;</span><span class="o">+</span><span class="vi">@name</span><span class="o">+</span><span class="s2">&quot;, age is &quot;</span><span class="o">+</span><span class="vi">@age</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">p3</span><span class="o">=</span><span class="no">Student</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;kaichuan&quot;</span><span class="p">,</span><span class="mi">25</span><span class="p">);</span><span class="n">p3</span><span class="o">.</span><span class="n">talk</span>
</span><span class='line'>
</span><span class='line'><span class="n">p4</span><span class="o">=</span><span class="no">Student</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Ben&quot;</span><span class="p">);</span><span class="n">p4</span><span class="o">.</span><span class="n">talk</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">p5</span><span class="o">=</span><span class="no">Worker</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;kaichuan&quot;</span><span class="p">,</span><span class="mi">30</span><span class="p">);</span><span class="n">p5</span><span class="o">.</span><span class="n">talk</span>
</span><span class='line'><span class="n">p6</span><span class="o">=</span><span class="no">Worker</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Ben&quot;</span><span class="p">);</span><span class="n">p6</span><span class="o">.</span><span class="n">talk</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;&emsp;Worker 类与 Student 类同样继承自 Person 类，亲缘关系是兄弟，当他们 talk
时，能准确表明自己身份，因为他们都重写了各自的 talk方法。 不同的子类继承一个父类，不仅子类和父类的行为有变异，而且子类彼此的行为也有差异，这就是多态。</p>

<p>&emsp;&emsp;用“ &lt; ”表示 Student 类是 Person 类的子类。Person 类的一切，Student 类都能
继承。但是 Student 类重写了 talk 方法，所以我们看到了不同的运行结果。子类继
承父类的时候，除了重写方法；也可以添加一些新的方法；或是增强父类的方法(用
关键字 super指明)。</p>

<p>&emsp;&emsp;Ruby语言只支持单继承，每一个类都只能有一个直接父类。这样避免了多继承的复杂度。但同时，Ruby提供了mixin的机制可以用来实现多继承。</p>

<p>&emsp;&emsp;可以使用super关键字调用对象父类的方法，当super省略参数时，将使用当前方法的参数来进行调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">meth</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;This is Base </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">meth</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;This is derived </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj1</span> <span class="o">=</span> <span class="no">Derived</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj1</span><span class="o">.</span><span class="n">meth</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">执行结果为：</span>
</span><span class='line'>
</span><span class='line'><span class="no">This</span> <span class="n">is</span> <span class="n">derived</span> <span class="nb">test</span>
</span><span class='line'>
</span><span class='line'><span class="no">This</span> <span class="n">is</span> <span class="no">Base</span> <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果传入的参数被修改再调用super的话，那么将会使用使用修改后的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">meth</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;This is Base </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">meth</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;This is derived </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="s2">&quot;over&quot;</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj1</span> <span class="o">=</span> <span class="no">Derived</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj1</span><span class="o">.</span><span class="n">meth</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">This</span> <span class="n">is</span> <span class="n">derived</span> <span class="nb">test</span>
</span><span class='line'><span class="no">This</span> <span class="n">is</span> <span class="no">Base</span> <span class="n">over</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>ruby有重载吗？ </strong><br/>
先看一个例子，实现一个类属性的可读写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">para</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@para</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">para</span>
</span><span class='line'>    <span class="vi">@para</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">para</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">a</span><span class="o">.</span><span class="n">para</span>
</span></code></pre></td></tr></table></div></figure>


<p>有错：</p>

<blockquote><p>ruby test.rb
test.rb:10:in &lsquo;para&rsquo;: wrong number of arguments (1 for 0) (ArgumentError)
from test.rb:10
Exit code: 1</p></blockquote>

<p>很明显的，ruby用para方法覆盖了para(a) <br/>
稍微把para(a)和para方法定义的位置对调一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">para</span>
</span><span class='line'>    <span class="vi">@para</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">para</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@para</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">para</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">a</span><span class="o">.</span><span class="n">para</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样有问题：</p>

<blockquote><p>ruby test.rb
test.rb:11:in `para&#8217;: wrong number of arguments (0 for 1) (ArgumentError)
from test.rb:11
Exit code: 1</p></blockquote>

<p>为什么会这样呢？
ruby支持可变参数，根本就没有必要定义两个同名的方法，只用在参数上面做文章就好了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">para</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@para</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">first</span> <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="vi">@para</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">para</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">a</span><span class="o">.</span><span class="n">para</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<blockquote><p>ruby test.rb
2
Exit code: 0
难道这个就是java中的重载在ruby中的实现？</p></blockquote>

<p><strong>那么重写呢？ </strong><br/>
看例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ow</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Father&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span> <span class="o">&lt;</span> <span class="n">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ow</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;I am!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">B</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">ow</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<blockquote><p>ruby test.rb
I am!
Exit code: 0</p></blockquote>

<p>但是有个东西就有点纠结了！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ow</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Father&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span> <span class="o">&lt;</span> <span class="n">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ow</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;I am!&quot;</span> <span class="o">+</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">B</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">ow</span><span class="p">(</span><span class="s2">&quot;Jack&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">ow</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<blockquote><p>ruby test.rb
test.rb:13:in `ow&#8217;: wrong number of arguments (0 for 1) (ArgumentError)
from test.rb:13
I am!Jack
Exit code: 1</p></blockquote>

<p> 在重载的时候时候也提到了，ruby是看&#8221;名字”来认识的，后面ow(name)方法已经把ow方法覆盖了！</p>

<p><strong><em>由上可知，Ruby语言，只有重写（override），没有其它语言具有的严格意义上的重载（overload）</em></strong></p>

<p><a href="http://www.cnitblog.com/Lily/archive/2013/01/03/6860.html">参考-面向对象的三个基本特征（讲解）</a><br/>
<a href="http://selfcontroller.iteye.com/blog/1286428">参考－ruby的继承和多态</a><br/>
<a href="http://dtzq01.iteye.com/blog/1010557">参考－ruby 重载？ 重写？</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[g++: Internal error: Killed (program cc1plus)]]></title>
    <link href="http://tianshuai.github.io/blog/2013/08/26/g-plus-plus-internal-error-killed-program-cc1plus/"/>
    <updated>2013-08-26T16:22:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/08/26/g-plus-plus-internal-error-killed-program-cc1plus</id>
    <content type="html"><![CDATA[<p>买了阿里云服务，系统为centos 6.3，内存512M.通过passenger安装nginx:　rvmsudo Passenger-install-nginx-module 在编译nginx时总是报错：<code>g++: Internal error: Killed (program cc1plus)</code>google很多终于找到问题：<a href="http://www.linlook.com/index/article/articleid/1350/">http://www.linlook.com/index/article/articleid/1350/</a>
以下引自原处：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>内存不足， 在linux下增加临时swap空间
</span><span class='line'>step 1:
</span><span class='line'>　　#dd if=/dev/zero of=/home/swap bs=1024 count=500000
</span><span class='line'>　　注释：of=/home/swap,放置swap的空间; count的大小就是增加的swap空间的大小，1024就是块大小，这里是1K，所以总共空间就是bs*count=500M
</span><span class='line'>step 2:
</span><span class='line'>　　# mkswap /home/swap
</span><span class='line'>　　注释：把刚才空间格式化成swap各式
</span><span class='line'>step 3:
</span><span class='line'>　　#swapon /home/swap
</span><span class='line'>　　注释：使刚才创建的swap空间
</span><span class='line'>
</span><span class='line'>      如果想关闭刚开辟的swap空间，只需命令：#swapoff
</span><span class='line'>
</span><span class='line'> 
</span><span class='line'>如上操作以后，你的安装过程就少了这道阻拦拉拉拉！！！ 当然对于公司工作估计很难遇到此种情况啦啦，你们配置都很牛逼滴！</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我收藏的网址－－－实时更新]]></title>
    <link href="http://tianshuai.github.io/blog/2013/08/20/zong-he/"/>
    <updated>2013-08-20T19:56:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/08/20/zong-he</id>
    <content type="html"><![CDATA[<p>在线js测试:
<a href="http://www.ostools.net/jsbin#source">http://www.ostools.net/jsbin#source</a></p>

<p>在线Markdown测试:
<a href="http://johnmacfarlane.net/pandoc/try/">http://johnmacfarlane.net/pandoc/try/</a></p>

<p>rails插件集合:
<a href="http://blog.163.com/prevBlogPerma.do?host=ebenz&amp;srl=14492363520114145023611&amp;mode=prev">http://blog.163.com/prevBlogPerma.do?host=ebenz&amp;srl=14492363520114145023611&amp;mode=prev</a></p>

<p>blogs.ejb.cc
<a href="http://blogs.ejb.cc">http://blogs.ejb.cc</a></p>

<p>候西阳的博客:
<a href="http://houxiyang.com/archives/68/">http://houxiyang.com/archives/68/</a></p>

<p>李骥平技术博客:
<a href="http://fsjoy.blog.51cto.com/318484/d-3">http://fsjoy.blog.51cto.com/318484/d-3</a></p>

<p>剑诩的学习笔记:
<a href="http://phsblog.sinaapp.com/index.php/Index/index">http://phsblog.sinaapp.com/index.php/Index/index</a></p>

<p>用Sinatra编写博客应用:
<a href="http://kb.cnblogs.com/page/89619/">http://kb.cnblogs.com/page/89619/</a></p>

<p>sinatra中文站:
<a href="http://www.sinatrarb.com/intro-zh.html">http://www.sinatrarb.com/intro-zh.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails3 在线文档－－实时更新]]></title>
    <link href="http://tianshuai.github.io/blog/2013/08/20/rails3-zai-xian-wen-dang-%5Bnil%5D%5Bnil%5Dshi-shi-geng-xin/"/>
    <updated>2013-08-20T19:21:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/08/20/rails3-zai-xian-wen-dang-[nil][nil]shi-shi-geng-xin</id>
    <content type="html"><![CDATA[<ul>
<li>是否是开发环境?</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>智能判断单复数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pluralize</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="s2">&quot;error&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>上传文件名的话，用 userid + fileid + timestamp 取 sha1 就能解决唯一性了</p></li>
<li><p>把数字转换为字节(用于精确判断文件或图片大小)</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">kilobyte</span> <span class="c1">#千字节</span>
</span><span class='line'><span class="c1">#=&gt;1024</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">megabytes</span>  <span class="c1">#上传文件限制字节数５Ｍ</span>
</span><span class='line'><span class="c1">#=&gt; 5242880</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>判断表单是新建还是修改的</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">new_record?</span>
</span><span class='line'><span class="c1">#=&gt;true</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">new_record?</span>
</span><span class='line'><span class="c1">#=&gt;false</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<ul>
<li>友好显示时间</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">time_ago_in_words</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">created_at</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在GET方法中使用stale?语句</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@list_item</span> <span class="o">=</span> <span class="vi">@list</span><span class="o">.</span><span class="n">list_items</span><span class="o">.</span><span class="n">find</span><span class="p">(</span> <span class="n">params</span><span class="o">[</span> <span class="ss">:id</span> <span class="o">]</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">stale?</span><span class="p">(</span> <span class="ss">:etag</span> <span class="o">=&gt;</span> <span class="vi">@list_item</span><span class="p">,</span> <span class="ss">:last_modified</span> <span class="o">=&gt;</span> <span class="vi">@list_item</span><span class="o">.</span><span class="n">updated_at</span><span class="o">.</span><span class="n">utc</span><span class="p">,</span> <span class="ss">:public</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">respond_with</span><span class="p">(</span> <span class="vi">@list_item</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="cm">=begin</span>
</span><span class='line'><span class="cm">stale?语句会通过响应发送回一个etag与一个last_modified日期。如果下一个请求是相同的URL，</span>
</span><span class='line'><span class="cm">那么浏览器会把这个etag和last_modified日期发送给服务器。然后stale?方法会对这两个参数进行分析，</span>
</span><span class='line'><span class="cm">如果内容相同，则返回304，如果出现参数值不同，那么说明有新的内容，这样返回200。</span>
</span><span class='line'><span class="cm">=end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>成生项目时如果用mongoid则：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="kp">new</span> <span class="n">app_name</span> <span class="o">--</span><span class="n">skip</span><span class="o">-</span><span class="n">active</span><span class="o">-</span><span class="n">record</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>解析html</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">raw</span> <span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s1">&#39;string&#39;</span><span class="o">.</span><span class="n">html_safe</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>rails3日期选择框:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= date_select :variable, :attribute, options %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">datetime_select</span> <span class="ss">:variable</span><span class="p">,</span> <span class="ss">:attribute</span><span class="p">,</span> <span class="n">options</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>格式化字符串</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Person&quot;</span><span class="o">.</span><span class="n">tableize</span>      <span class="c1"># =&gt; &quot;people&quot;</span>
</span><span class='line'><span class="s2">&quot;Invoice&quot;</span><span class="o">.</span><span class="n">tableize</span>     <span class="c1"># =&gt; &quot;invoices&quot;</span>
</span><span class='line'><span class="s2">&quot;InvoiceLine&quot;</span><span class="o">.</span><span class="n">tableize</span> <span class="c1"># =&gt; &quot;invoice_lines&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux 系统命令大全]]></title>
    <link href="http://tianshuai.github.io/blog/2013/08/20/linux-xi-tong-ming-ling-da-quan/"/>
    <updated>2013-08-20T19:04:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/08/20/linux-xi-tong-ming-ling-da-quan</id>
    <content type="html"><![CDATA[<h4>系统信息</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>arch 显示机器的处理器架构(1) 
</span><span class='line'>uname -m 显示机器的处理器架构(2) 
</span><span class='line'>uname -r 显示正在使用的内核版本 
</span><span class='line'>dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI) 
</span><span class='line'>hdparm -i /dev/hda 罗列一个磁盘的架构特性 
</span><span class='line'>hdparm -tT /dev/sda 在磁盘上执行测试性读取操作 
</span><span class='line'>cat /proc/cpuinfo 显示CPU info的信息 
</span><span class='line'>cat /proc/interrupts 显示中断 
</span><span class='line'>cat /proc/meminfo 校验内存使用 
</span><span class='line'>cat /proc/swaps 显示哪些swap被使用 
</span><span class='line'>cat /proc/version 显示内核的版本 
</span><span class='line'>cat /proc/net/dev 显示网络适配器及统计 
</span><span class='line'>cat /proc/mounts 显示已加载的文件系统 
</span><span class='line'>lspci -tv 罗列 PCI 设备 
</span><span class='line'>lsusb -tv 显示 USB 设备 
</span><span class='line'>date 显示系统日期 
</span><span class='line'>cal 2007 显示2007年的日历表 
</span><span class='line'>date 041217002007.00 设置日期和时间 - 月日时分年.秒 
</span><span class='line'>clock -w 将时间修改保存到 BIOS </span></code></pre></td></tr></table></div></figure>


<h4>关机 (系统的关机、重启以及登出 )</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shutdown -h now 关闭系统(1) 
</span><span class='line'>init 0 关闭系统(2) 
</span><span class='line'>telinit 0 关闭系统(3) 
</span><span class='line'>shutdown -h hours:minutes & 按预定时间关闭系统 
</span><span class='line'>shutdown -c 取消按预定时间关闭系统 
</span><span class='line'>shutdown -r now 重启(1) 
</span><span class='line'>reboot 重启(2) 
</span><span class='line'>logout 注销 </span></code></pre></td></tr></table></div></figure>


<!--more-->


<h4>文件和目录</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /home 进入 '/ home' 目录' 
</span><span class='line'>cd .. 返回上一级目录 
</span><span class='line'>cd ../.. 返回上两级目录 
</span><span class='line'>cd 进入个人的主目录 
</span><span class='line'>cd ~user1 进入个人的主目录 
</span><span class='line'>cd - 返回上次所在的目录 
</span><span class='line'>pwd 显示工作路径 
</span><span class='line'>ls 查看目录中的文件 
</span><span class='line'>ls -F 查看目录中的文件 
</span><span class='line'>ls -l 显示文件和目录的详细资料 
</span><span class='line'>ls -a 显示隐藏文件 
</span><span class='line'>ls *[0-9]* 显示包含数字的文件名和目录名 
</span><span class='line'>tree 显示文件和目录由根目录开始的树形结构(1) 
</span><span class='line'>lstree 显示文件和目录由根目录开始的树形结构(2) 
</span><span class='line'>mkdir dir1 创建一个叫做 'dir1' 的目录' 
</span><span class='line'>mkdir dir1 dir2 同时创建两个目录 
</span><span class='line'>mkdir -p /tmp/dir1/dir2 创建一个目录树 
</span><span class='line'>rm -f file1 删除一个叫做 'file1' 的文件' 
</span><span class='line'>rmdir dir1 删除一个叫做 'dir1' 的目录' 
</span><span class='line'>rm -rf dir1 删除一个叫做 'dir1' 的目录并同时删除其内容 
</span><span class='line'>rm -rf dir1 dir2 同时删除两个目录及它们的内容 
</span><span class='line'>mv dir1 new_dir 重命名/移动 一个目录 
</span><span class='line'>cp file1 file2 复制一个文件 
</span><span class='line'>cp dir/* . 复制一个目录下的所有文件到当前工作目录 
</span><span class='line'>cp -a /tmp/dir1 . 复制一个目录到当前工作目录 
</span><span class='line'>cp -a dir1 dir2 复制一个目录 
</span><span class='line'>ln -s file1 lnk1 创建一个指向文件或目录的软链接 
</span><span class='line'>ln file1 lnk1 创建一个指向文件或目录的物理链接 
</span><span class='line'>touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm) 
</span><span class='line'>file file1 outputs the mime type of the file as text 
</span><span class='line'>iconv -l 列出已知的编码 
</span><span class='line'>iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates anew from the given input file by assuming it is encoded in fromEncodingand converting it to toEncoding. 
</span><span class='line'>find . -maxdepth 1 -name *.jpg -print -exec convert "{}" -resize 80x60"thumbs/{}" \; batch resize files in the current directory and send themto a thumbnails directory (requires convert from Imagemagick) </span></code></pre></td></tr></table></div></figure>


<h4>文件搜索</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find / -name file1 从 '/' 开始进入根文件系统搜索文件和目录 
</span><span class='line'>find / -user user1 搜索属于用户 'user1' 的文件和目录 
</span><span class='line'>find /home/user1 -name \*.bin 在目录 '/ home/user1' 中搜索带有'.bin' 结尾的文件 
</span><span class='line'>find /usr/bin -type f -atime  100 搜索在过去100天内未被使用过的执行文件 
</span><span class='line'>find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件 
</span><span class='line'>find / -name \*.rpm -exec chmod 755 '{}' \; 搜索以 '.rpm' 结尾的文件并定义其权限 
</span><span class='line'>find / -xdev -name \*.rpm 搜索以 '.rpm' 结尾的文件，忽略光驱、捷盘等可移动设备 
</span><span class='line'>locate \*.ps 寻找以 '.ps' 结尾的文件 - 先运行 'updatedb' 命令 
</span><span class='line'>whereis halt 显示一个二进制文件、源码或man的位置 
</span><span class='line'>which halt 显示一个二进制文件或可执行文件的完整路径 </span></code></pre></td></tr></table></div></figure>


<h4>挂载一个文件系统</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 '/ mnt/hda2' 已经存在 
</span><span class='line'>umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 '/ mnt/hda2' 退出 
</span><span class='line'>fuser -km /mnt/hda2 当设备繁忙时强制卸载 
</span><span class='line'>umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用 
</span><span class='line'>mount /dev/fd0 /mnt/floppy 挂载一个软盘 
</span><span class='line'>mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom 
</span><span class='line'>mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom 
</span><span class='line'>mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom 
</span><span class='line'>mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件 
</span><span class='line'>mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统 
</span><span class='line'>mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备 
</span><span class='line'>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享 </span></code></pre></td></tr></table></div></figure>


<h4>磁盘空间</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>df -h 显示已经挂载的分区列表 
</span><span class='line'>ls -lSr |more 以尺寸大小排列文件和目录 
</span><span class='line'>du -sh dir1 估算目录 'dir1' 已经使用的磁盘空间' 
</span><span class='line'>du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小 
</span><span class='line'>rpm -q -a --qf '{SIZE}t%{NAME}n' | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统) 
</span><span class='line'>dpkg-query -W -f='${Installed-Size;10}t${Package}n' | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统) </span></code></pre></td></tr></table></div></figure>


<h4>用户和群组</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groupadd group_name 创建一个新用户组 
</span><span class='line'>groupdel group_name 删除一个用户组 
</span><span class='line'>groupmod -n new_group_name old_group_name 重命名一个用户组 
</span><span class='line'>useradd -c "Name Surname " -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 "admin" 用户组的用户 
</span><span class='line'>useradd user1 创建一个新用户 
</span><span class='line'>userdel -r user1 删除一个用户 ( '-r' 排除主目录) 
</span><span class='line'>usermod -c "User FTP" -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性 
</span><span class='line'>passwd 修改口令 
</span><span class='line'>passwd user1 修改一个用户的口令 (只允许root执行) 
</span><span class='line'>chage -E 2005-12-31 user1 设置用户口令的失效期限 
</span><span class='line'>pwck 检查 '/etc/passwd' 的文件格式和语法修正以及存在的用户 
</span><span class='line'>grpck 检查 '/etc/passwd' 的文件格式和语法修正以及存在的群组 
</span><span class='line'>newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组 </span></code></pre></td></tr></table></div></figure>


<h4>文件的权限 &ndash; 使用 &ldquo; &rdquo; 设置权限，使用 &ldquo;&ndash;&rdquo; 用于取消</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls -lh 显示权限 
</span><span class='line'>ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示 
</span><span class='line'>chmod ugo rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限 
</span><span class='line'>chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限 
</span><span class='line'>chown user1 file1 改变一个文件的所有人属性 
</span><span class='line'>chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性 
</span><span class='line'>chgrp group1 file1 改变文件的群组 
</span><span class='line'>chown user1:group1 file1 改变一个文件的所有人和群组属性 
</span><span class='line'>find / -perm -u s 罗列一个系统中所有使用了SUID控制的文件 
</span><span class='line'>chmod u s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限 
</span><span class='line'>chmod u-s /bin/file1 禁用一个二进制文件的 SUID位 
</span><span class='line'>chmod g s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的 
</span><span class='line'>chmod g-s /home/public 禁用一个目录的 SGID 位 
</span><span class='line'>chmod o t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件 
</span><span class='line'>chmod o-t /home/public 禁用一个目录的 STIKY 位 </span></code></pre></td></tr></table></div></figure>


<h4>文件的特殊属性 &ndash; 使用 &ldquo; &rdquo; 设置权限，使用 &ldquo;&ndash;&rdquo; 用于取消</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chattr  a file1 只允许以追加方式读写文件 
</span><span class='line'>chattr  c file1 允许这个文件能被内核自动压缩/解压 
</span><span class='line'>chattr  d file1 在进行文件系统备份时，dump程序将忽略这个文件 
</span><span class='line'>chattr  i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接 
</span><span class='line'>chattr  s file1 允许一个文件被安全地删除 
</span><span class='line'>chattr  S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘 
</span><span class='line'>chattr  u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件 
</span><span class='line'>lsattr 显示特殊的属性 </span></code></pre></td></tr></table></div></figure>


<h4>打包和压缩文件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bunzip2 file1.bz2 解压一个叫做 'file1.bz2'的文件 
</span><span class='line'>bzip2 file1 压缩一个叫做 'file1' 的文件 
</span><span class='line'>gunzip file1.gz 解压一个叫做 'file1.gz'的文件 
</span><span class='line'>gzip file1 压缩一个叫做 'file1'的文件 
</span><span class='line'>gzip -9 file1 最大程度压缩 
</span><span class='line'>rar a file1.rar test_file 创建一个叫做 'file1.rar' 的包 
</span><span class='line'>rar a file1.rar file1 file2 dir1 同时压缩 'file1', 'file2' 以及目录 'dir1' 
</span><span class='line'>rar x file1.rar 解压rar包 
</span><span class='line'>unrar x file1.rar 解压rar包 
</span><span class='line'>tar -cvf archive.tar file1 创建一个非压缩的 tarball 
</span><span class='line'>tar -cvf archive.tar file1 file2 dir1 创建一个包含了 'file1', 'file2' 以及 'dir1'的档案文件 
</span><span class='line'>tar -tf archive.tar 显示一个包中的内容 
</span><span class='line'>tar -xvf archive.tar 释放一个包 
</span><span class='line'>tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下 
</span><span class='line'>tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包 
</span><span class='line'>tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包 
</span><span class='line'>tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包 
</span><span class='line'>tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包 
</span><span class='line'>zip file1.zip file1 创建一个zip格式的压缩包 
</span><span class='line'>zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 
</span><span class='line'>unzip file1.zip 解压一个zip格式压缩包 </span></code></pre></td></tr></table></div></figure>


<h4>RPM 包 &ndash; （Fedora, Redhat及类似系统）</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpm -ivh package.rpm 安装一个rpm包 
</span><span class='line'>rpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告 
</span><span class='line'>rpm -U package.rpm 更新一个rpm包但不改变其配置文件 
</span><span class='line'>rpm -F package.rpm 更新一个确定已经安装的rpm包 
</span><span class='line'>rpm -e package_name.rpm 删除一个rpm包 
</span><span class='line'>rpm -qa 显示系统中所有已经安装的rpm包 
</span><span class='line'>rpm -qa | grep httpd 显示所有名称中包含 "httpd" 字样的rpm包 
</span><span class='line'>rpm -qi package_name 获取一个已安装包的特殊信息 
</span><span class='line'>rpm -qg "System Environment/Daemons" 显示一个组件的rpm包 
</span><span class='line'>rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表 
</span><span class='line'>rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表 
</span><span class='line'>rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表 
</span><span class='line'>rpm -q package_name --whatprovides 显示一个rpm包所占的体积 
</span><span class='line'>rpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l 
</span><span class='line'>rpm -q package_name --changelog 显示一个rpm包的修改历史 
</span><span class='line'>rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供 
</span><span class='line'>rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表 
</span><span class='line'>rpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书 
</span><span class='line'>rpm --checksig package.rpm 确认一个rpm包的完整性 
</span><span class='line'>rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性 
</span><span class='line'>rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间 
</span><span class='line'>rpm -Va 检查系统中所有已安装的rpm包- 小心使用 
</span><span class='line'>rpm -Vp package.rpm 确认一个rpm包还未安装 
</span><span class='line'>rpm2cpio package.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件 
</span><span class='line'>rpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm 从一个rpm源码安装一个构建好的包 
</span><span class='line'>rpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包 </span></code></pre></td></tr></table></div></figure>


<h4>YUM 软件包升级器 &ndash; （Fedora, RedHat及类似系统）</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install package_name 下载并安装一个rpm包 
</span><span class='line'>yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系 
</span><span class='line'>yum update package_name.rpm 更新当前系统中所有安装的rpm包 
</span><span class='line'>yum update package_name 更新一个rpm包 
</span><span class='line'>yum remove package_name 删除一个rpm包 
</span><span class='line'>yum list 列出当前系统中安装的所有包 
</span><span class='line'>yum search package_name 在rpm仓库中搜寻软件包 
</span><span class='line'>yum clean packages 清理rpm缓存删除下载的包 
</span><span class='line'>yum clean headers 删除所有头文件 
</span><span class='line'>yum clean all 删除所有缓存的包和头文件 </span></code></pre></td></tr></table></div></figure>


<h4>DEB 包 (Debian, Ubuntu 以及类似系统)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dpkg -i package.deb 安装/更新一个 deb 包 
</span><span class='line'>dpkg -r package_name 从系统删除一个 deb 包 
</span><span class='line'>dpkg -l 显示系统中所有已经安装的 deb 包 
</span><span class='line'>dpkg -l | grep httpd 显示所有名称中包含 "httpd" 字样的deb包 
</span><span class='line'>dpkg -s package_name 获得已经安装在系统中一个特殊包的信息 
</span><span class='line'>dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表 
</span><span class='line'>dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表 
</span><span class='line'>dpkg -S /bin/ping 确认所给的文件由哪个deb包提供 </span></code></pre></td></tr></table></div></figure>


<h4>APT 软件工具 (Debian, Ubuntu 以及类似系统)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install package_name 安装/更新一个 deb 包 
</span><span class='line'>apt-cdrom install package_name 从光盘安装/更新一个 deb 包 
</span><span class='line'>apt-get update 升级列表中的软件包 
</span><span class='line'>apt-get upgrade 升级所有已安装的软件 
</span><span class='line'>apt-get remove package_name 从系统删除一个deb包 
</span><span class='line'>apt-get check 确认依赖的软件仓库正确 
</span><span class='line'>apt-get clean 从下载的软件包中清理缓存 
</span><span class='line'>apt-cache search searched-package 返回包含所要搜索字符串的软件包名称 </span></code></pre></td></tr></table></div></figure>


<h4>查看文件内容</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat file1 从第一个字节开始正向查看文件的内容 
</span><span class='line'>tac file1 从最后一行开始反向查看一个文件的内容 
</span><span class='line'>more file1 查看一个长文件的内容 
</span><span class='line'>less file1 类似于 'more' 命令，但是它允许在文件中和正向操作一样的反向操作 
</span><span class='line'>head -2 file1 查看一个文件的前两行 
</span><span class='line'>tail -2 file1 查看一个文件的最后两行 
</span><span class='line'>tail -f /var/log/messages 实时查看被添加到一个文件中的内容 </span></code></pre></td></tr></table></div></figure>


<h4>文本处理</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat file1 file2 ... | command &lt;&gt; file1_in.txt_or_file1_out.txtgeneral syntax for text manipulation using PIPE, STDIN and STDOUT 
</span><span class='line'>cat file1 | command( sed, grep, awk, grep, etc...) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中 
</span><span class='line'>cat file1 | command( sed, grep, awk, grep, etc...) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中 
</span><span class='line'>grep Aug /var/log/messages 在文件 '/var/log/messages'中查找关键词"Aug" 
</span><span class='line'>grep ^Aug /var/log/messages 在文件 '/var/log/messages'中查找以"Aug"开始的词汇 
</span><span class='line'>grep [0-9] /var/log/messages 选择 '/var/log/messages' 文件中所有包含数字的行 
</span><span class='line'>grep Aug -R /var/log/* 在目录 '/var/log' 及随后的目录中搜索字符串"Aug" 
</span><span class='line'>sed 's/stringa1/stringa2/g' example.txt 将example.txt文件中的 "string1" 替换成 "string2" 
</span><span class='line'>sed '/^$/d' example.txt 从example.txt文件中删除所有空白行 
</span><span class='line'>sed '/ *#/d; /^$/d' example.txt 从example.txt文件中删除所有注释和空白行 
</span><span class='line'>echo 'esempio' | tr '[:lower:]' '[:upper:]' 合并上下单元格内容 
</span><span class='line'>sed -e '1d' result.txt 从文件example.txt 中排除第一行 
</span><span class='line'>sed -n '/stringa1/p' 查看只包含词汇 "string1"的行 
</span><span class='line'>sed -e 's/ *$//' example.txt 删除每一行最后的空白字符 
</span><span class='line'>sed -e 's/stringa1//g' example.txt 从文档中只删除词汇 "string1" 并保留剩余全部 
</span><span class='line'>sed -n '1,5p;5q' example.txt 查看从第一行到第5行内容 
</span><span class='line'>sed -n '5p;5q' example.txt 查看第5行 
</span><span class='line'>sed -e 's/00*/0/g' example.txt 用单个零替换多个零 
</span><span class='line'>cat -n file1 标示文件的行数 
</span><span class='line'>cat example.txt | awk 'NR%2==1' 删除example.txt文件中的所有偶数行 
</span><span class='line'>echo a b c | awk '{print $1}' 查看一行第一栏 
</span><span class='line'>echo a b c | awk '{print $1,$3}' 查看一行的第一和第三栏 
</span><span class='line'>paste file1 file2 合并两个文件或两栏的内容 
</span><span class='line'>paste -d ' ' file1 file2 合并两个文件或两栏的内容，中间用" "区分 
</span><span class='line'>sort file1 file2 排序两个文件的内容 
</span><span class='line'>sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份) 
</span><span class='line'>sort file1 file2 | uniq -u 删除交集，留下其他的行 
</span><span class='line'>sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件) 
</span><span class='line'>comm -1 file1 file2 比较两个文件的内容只删除 'file1' 所包含的内容 
</span><span class='line'>comm -2 file1 file2 比较两个文件的内容只删除 'file2' 所包含的内容 
</span><span class='line'>comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分 </span></code></pre></td></tr></table></div></figure>


<h4>字符设置和文件格式转换</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX 
</span><span class='line'>unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS 
</span><span class='line'>recode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html 
</span><span class='line'>recode -l | more 显示所有允许的转换格式 </span></code></pre></td></tr></table></div></figure>


<h4>文件系统分析</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块 
</span><span class='line'>fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性 
</span><span class='line'>fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 
</span><span class='line'>e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 
</span><span class='line'>e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 
</span><span class='line'>fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 
</span><span class='line'>fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性 
</span><span class='line'>fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 
</span><span class='line'>dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 </span></code></pre></td></tr></table></div></figure>


<h4>初始化一个文件系统</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkfs /dev/hda1 在hda1分区创建一个文件系统 
</span><span class='line'>mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统 
</span><span class='line'>mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统 
</span><span class='line'>mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统 
</span><span class='line'>fdformat -n /dev/fd0 格式化一个软盘 
</span><span class='line'>mkswap /dev/hda3 创建一个swap文件系统 </span></code></pre></td></tr></table></div></figure>


<h4>SWAP文件系统</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkswap /dev/hda3 创建一个swap文件系统 
</span><span class='line'>swapon /dev/hda3 启用一个新的swap文件系统 
</span><span class='line'>swapon /dev/hda2 /dev/hdb3 启用两个swap分区 </span></code></pre></td></tr></table></div></figure>


<h4>备份</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dump -0aj -f /tmp/home0.bak /home 制作一个 '/home' 目录的完整备份 
</span><span class='line'>dump -1aj -f /tmp/home0.bak /home 制作一个 '/home' 目录的交互式备份 
</span><span class='line'>restore -if /tmp/home0.bak 还原一个交互式备份 
</span><span class='line'>rsync -rogpav --delete /home /tmp 同步两边的目录 
</span><span class='line'>rsync -rogpav -e ssh --delete /home ip_address:/tmp 通过SSH通道rsync 
</span><span class='line'>rsync -az -e ssh --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录 
</span><span class='line'>rsync -az -e ssh --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录 
</span><span class='line'>dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr 'dd of=hda.gz' 通过ssh在远程主机上执行一次备份本地磁盘的操作 
</span><span class='line'>dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件 
</span><span class='line'>tar -Puf backup.tar /home/user 执行一次对 '/home/user' 目录的交互式备份操作 
</span><span class='line'>( cd /tmp/local/ && tar c . ) | ssh -C user@ip_addr 'cd /home/share/ && tar x -p' 通过ssh在远程目录中复制一个目录内容 
</span><span class='line'>( tar c /home ) | ssh -C user@ip_addr 'cd /home/backup-home && tar x -p' 通过ssh在远程目录中复制一个本地目录 
</span><span class='line'>tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接 
</span><span class='line'>find /home/user1 -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 '.txt' 结尾的文件到另一个目录 
</span><span class='line'>find /var/log -name '*.log' | tar cv --files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 '.log' 结尾的文件并做成一个bzip包 
</span><span class='line'>dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作 
</span><span class='line'>dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容 </span></code></pre></td></tr></table></div></figure>


<h4>光盘</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容 
</span><span class='line'>mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件 
</span><span class='line'>mkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件 
</span><span class='line'>mkisofs -J -allow-leading-dots -R -V "Label CD" -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件 
</span><span class='line'>cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件 
</span><span class='line'>gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件 
</span><span class='line'>mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件 
</span><span class='line'>cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中 
</span><span class='line'>cd-paranoia -- "-3" 从一个CD光盘转录音轨到 wav 文件中（参数-3） 
</span><span class='line'>cdrecord --scanbus 扫描总线以识别scsi通道 
</span><span class='line'>dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD </span></code></pre></td></tr></table></div></figure>


<h4>网络 &ndash; （以太网和WIFI无线）</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ifconfig eth0 显示一个以太网卡的配置 
</span><span class='line'>ifup eth0 启用一个 'eth0' 网络设备 
</span><span class='line'>ifdown eth0 禁用一个 'eth0' 网络设备 
</span><span class='line'>ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址 
</span><span class='line'>ifconfig eth0 promisc 设置 'eth0' 成混杂模式以嗅探数据包 (sniffing) 
</span><span class='line'>dhclient eth0 以dhcp模式启用 'eth0' 
</span><span class='line'>route -n show routing table 
</span><span class='line'>route add -net 0/0 gw IP_Gateway configura default gateway 
</span><span class='line'>route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network '192.168.0.0/16' 
</span><span class='line'>route del 0/0 gw IP_gateway remove static route 
</span><span class='line'>echo "1" &gt; /proc/sys/net/ipv4/ip_forward activate ip routing 
</span><span class='line'>hostname show hostname of system 
</span><span class='line'>host www.example.com lookup hostname to resolve name to ip address and viceversa(1) 
</span><span class='line'>nslookup www.example.com lookup hostname to resolve name to ip address and viceversa(2) 
</span><span class='line'>ip link show show link status of all interfaces 
</span><span class='line'>mii-tool eth0 show link status of 'eth0' 
</span><span class='line'>ethtool eth0 show statistics of network card 'eth0' 
</span><span class='line'>netstat -tup show all active network connections and their PID 
</span><span class='line'>netstat -tupl show all network services listening on the system and their PID 
</span><span class='line'>tcpdump tcp port 80 show all HTTP traffic 
</span><span class='line'>iwlist scan show wireless networks 
</span><span class='line'>iwconfig eth1 show configuration of a wireless network card 
</span><span class='line'>hostname show hostname 
</span><span class='line'>host www.example.com lookup hostname to resolve name to ip address and viceversa 
</span><span class='line'>nslookup www.example.com lookup hostname to resolve name to ip address and viceversa 
</span><span class='line'>whois www.example.com lookup on Whois database 
</span><span class='line'>
</span><span class='line'>GO TOP INDEX ^ 
</span><span class='line'>Microsoft Windows networks (SAMBA) 
</span><span class='line'>nbtscan ip_addr netbios name resolution 
</span><span class='line'>nmblookup -A ip_addr netbios name resolution 
</span><span class='line'>smbclient -L ip_addr/hostname show remote shares of a windows host 
</span><span class='line'>smbget -Rr smb://ip_addr/share like wget can download files from a host windows via smb 
</span><span class='line'>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share mount a windows network share</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 进阶]]></title>
    <link href="http://tianshuai.github.io/blog/2013/03/28/ruby-jin-jie/"/>
    <updated>2013-03-28T14:48:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/03/28/ruby-jin-jie</id>
    <content type="html"><![CDATA[<p>1.下载网页中图片</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'><span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="s2">&quot;www.google.com.hk&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">http</span><span class="o">|</span>
</span><span class='line'>  <span class="n">resp</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;/images/srpr/nav_logo27.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;D:/test.png&quot;</span><span class="p">,</span> <span class="s2">&quot;wb&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>    <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;OK&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>2.Nokogiri 中文乱码解决技巧
Nokogiri在抓取网页操作性和速度方面的确非常棒，但中文乱码一直让很多人头痛，老宋最近在写一个抓取器的时候做了一个总结，汇总成6条提示，如果你也遇到乱码问题，不妨试一下:)</p>

<p>提示1：在文件头指定程序编码
在***.rb头上添加,注意：一定要在第一行，中间添加无效</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#coding: utf-8</span>
</span><span class='line'><span class="err">提示</span><span class="mi">2</span><span class="ss">:url</span><span class="err">有中文要进行</span><span class="n">urlencode</span><span class="err">编码</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span><span class="o">=</span><span class="no">URI</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="s2">&quot;http://g.cn?q=中国&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err">提示</span><span class="mi">3</span><span class="err">：显式设置要抓取目标的编码</span>
</span><span class='line'>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://rubyer.me/&quot;</span><span class="p">),</span> <span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err">提示</span><span class="mi">4</span><span class="p">:</span> <span class="err">使用</span><span class="no">Iconv</span><span class="o">.</span><span class="n">iconv</span><span class="p">(</span><span class="n">to_encoding</span><span class="p">,</span><span class="n">from_encoding</span><span class="p">,</span><span class="n">str_to_conv</span><span class="p">)</span><span class="err">手动转换编码</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Iconv</span><span class="o">.</span><span class="n">iconv</span><span class="p">(</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span> <span class="s2">&quot;GBK&quot;</span><span class="p">,</span> <span class="n">doc</span><span class="p">)</span>
</span><span class='line'><span class="err">提示</span><span class="mi">5</span><span class="p">:</span> <span class="err">如果不确定目标是什么编码，</span><span class="no">Ruby1</span><span class="o">.</span><span class="mi">9</span><span class="err">开始可以用</span><span class="nb">String</span><span class="err">类内置的</span><span class="n">encoding</span><span class="err">来得到编码。</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Iconv</span><span class="o">.</span><span class="n">iconv</span><span class="p">(</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span> <span class="n">doc</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">encoding</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="n">doc</span><span class="p">)</span>
</span><span class='line'><span class="err">提示</span><span class="mi">6</span><span class="p">:</span> <span class="err">使用</span><span class="o">//</span><span class="no">IGNORE</span><span class="err">忽略无法转换的字符</span>
</span><span class='line'>
</span><span class='line'><span class="no">Iconv</span><span class="o">.</span><span class="n">iconv</span><span class="p">(</span><span class="s2">&quot;UTF-8//IGNORE&quot;</span><span class="p">,</span> <span class="s2">&quot;GBK//IGNORE&quot;</span><span class="p">,</span> <span class="n">doc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>法一、结合meta_encoding和Iconv</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#coding: utf-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;iconv&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#这个url是百度一个快照的地址，直接拿来做例子。</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://cache.baidu.com/c?m=9f65cb4a8c8507ed4fece763105690365203c0743ca08f426284cd15c6790a120131b6e667690d44809e222615ea141cbcff&amp;p=817bc45b87934eac5fa8c7710a0d&amp;user=baidu&amp;fm=sc&amp;query=site%3Arubyer%2Eme&amp;qid=b351e91d4dc50477&amp;p1=2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="no">Iconv</span><span class="o">.</span><span class="n">conv</span><span class="p">(</span><span class="s2">&quot;utf-8&quot;</span><span class="p">,</span> <span class="s2">&quot;gb2312&quot;</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">respons</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果：</p>

<p>  ?7?4  cache_spider git:(master) ?7?1 ruby temp.rb
  temp.rb:11:in <code>conv': "\xF8?0?0\xB5?0?4\xB4?0?2?0?7\xC3档)\r\n\r\n\r\n"... (Iconv::IllegalSequence) from temp.rb:11:in</code><main>&#8217;</p>

<p>法二、直接猜编码为utf-8</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 省略url前代码</span>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="p">,</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;utf-8&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">response</span>
</span></code></pre></td></tr></table></div></figure>


<p>能输出HTML，但基本乱码，类似：</p>

<p>  <p>?0?6?0?8?0?5°?0?9?0?8model?0?0?0?6?0?2?0?1?0?6?0?3?0?0?0?8?0?6?0?3?0?0±?0?8?0?5?0?1¨?0?1?0?5?0?4?0?7?0?0?0?2migration?0?8?0?7?0?8?0?8?0?3?0?0?0?5?0?1?0?7?0?7?0?9?0?9ruby-china?0?8?0?2?0?8 ?0?7?0?0?0?5?0?2ó?0?0?0?4?0?6?0?1?0?2?0?5?0?5ù?0?4?0?7?0?6?0?4?0?1?0?4?0?5¨?0?6?0?4?0?8?0?5?0?6?0?6?0?7?0?9?0?8±?0?3á±?0?6?0?5?0?3?0?0é·?0?6?0?5?0?1?0?3?0?1?0?8?0?5·?0?3?0?8?0?5model?0?8?0?7?0?2?0?3?0?8?0?8?0?3?0?5?0?7?0?3?0?8?0?5?0?0?0?3?0?3?0?6?0?2?0?7?0?8?0?2model?0?0í?0?4?0?7?0?9?0?9before_create?0?5?0?1?0?6?0?3?0?2ó?0?8?0?9?0?4?0?4rake db:s&hellip;  </p></p>

<p>法三、直接猜编码为utf-8</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 省略url前代码</span>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="p">,</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;gb2312&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#response = Nokogiri::HTML.parse(response)</span>
</span><span class='line'><span class="c1">#response = Iconv.conv(&quot;utf-8&quot;, response.meta_encoding, response)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">response</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<p> ?7?4  cache_spider git:(master) ?7?1 ruby temp.rb
 output error : unknown encoding gb2312</p>

<p>法四、试了以上3种方法都失败后，我才想自己处理编码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">convert_encoding</span><span class="p">(</span><span class="n">source_encoding</span><span class="p">,</span> <span class="n">destination_encoding</span><span class="p">,</span> <span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ec</span> <span class="o">=</span> <span class="ss">Encoding</span><span class="p">:</span><span class="ss">:Converter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">source_encoding</span><span class="p">,</span> <span class="n">destination_encoding</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">ec</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Encoding</span><span class="p">:</span><span class="ss">:UndefinedConversionError</span>
</span><span class='line'>    <span class="nb">p</span> <span class="vg">$!</span><span class="o">.</span><span class="n">error_char</span><span class="o">.</span><span class="n">dump</span>
</span><span class='line'>    <span class="nb">p</span> <span class="vg">$!</span><span class="o">.</span><span class="n">error_char</span><span class="o">.</span><span class="n">encoding</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Encoding</span><span class="p">:</span><span class="ss">:InvalidByteSequenceError</span>
</span><span class='line'>    <span class="nb">p</span> <span class="vg">$!</span>
</span><span class='line'>    <span class="nb">p</span> <span class="vg">$!</span><span class="o">.</span><span class="n">error_bytes</span><span class="o">.</span><span class="n">dump</span>  <span class="k">if</span> <span class="vg">$!</span><span class="o">.</span><span class="n">error_bytes</span>
</span><span class='line'>    <span class="nb">p</span> <span class="vg">$!</span><span class="o">.</span><span class="n">readagain_bytes</span><span class="o">.</span><span class="n">dump</span> <span class="k">if</span> <span class="vg">$!</span><span class="o">.</span><span class="n">readagain_bytes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">str</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>试了gbk, utf-8, gb2312各种组合，都不完美。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">html</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="n">html</span><span class="o">.</span><span class="n">force_encoding</span><span class="p">(</span><span class="s2">&quot;gbk&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">html</span><span class="o">.</span><span class="n">encode!</span><span class="p">(</span><span class="s2">&quot;utf-8&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="o">.</span><span class="n">parse</span> <span class="n">html</span>
</span><span class='line'><span class="n">doc</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>判断一个段文本是否是UTF-8编码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'> <span class="k">def</span> <span class="nf">utf8?</span>
</span><span class='line'><span class="err">　　　</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;U*&#39;</span><span class="p">)</span> <span class="k">rescue</span> <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'> <span class="err">　　</span><span class="kp">true</span>
</span><span class='line'><span class="err">　</span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>哈希数组排序
test.sort_by {|t| t[:x]}.inject([]) {|r,h| r&lt;&lt;h if !r.last||r.last[:x]!=h[:x]; r}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 编程风格介绍]]></title>
    <link href="http://tianshuai.github.io/blog/2013/03/28/ruby-bian-cheng-feng-ge-jie-shao/"/>
    <updated>2013-03-28T14:33:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/03/28/ruby-bian-cheng-feng-ge-jie-shao</id>
    <content type="html"><![CDATA[<p>学习一门新的语言时，要先养成好的编程风格，然后将这种风格应用到coding中，慢慢地成为习惯。</p>

<p>本页用于介绍 Ruby 社区首推的代码编写风格，本文翻译来自： <a href="https://github.com/bbatsov/ruby-style-guide">https://github.com/bbatsov/ruby-style-guide</a>
目录</p>

<pre><code>格式，文件格式
语法
命名
注释
注解
类相关
异常
集合
字符串
正则表达式
百分号
元编程
杂项
</code></pre>

<p>The Ruby Style Guide</p>

<p>This Ruby style guide recommends best practices so that real-world Ruby programmers can write code that can be maintained by other real-world Ruby programmers. A style guide that reflects real-world usage gets used, and a style guide that holds to an ideal that has been rejected by the people it is supposed to help risks not getting used at all – no matter how good it is.</p>

<p>The guide is separated into several sections of related rules. I&rsquo;ve tried to add the rationale behind the rules (if it&rsquo;s omitted I&rsquo;ve assumed that is pretty obvious).</p>

<p>I didn&rsquo;t come up with all the rules out of nowhere &ndash; they are mostly based on my extensive career as a professional software engineer, feedback and suggestions from members of the Ruby community and various highly regarded Ruby programming resources, such as &ldquo;Programming Ruby 1.9&rdquo; and &ldquo;The Ruby Programming Language&rdquo;.</p>

<p>The guide is still a work in progress &ndash; some rules are lacking examples, some rules don&rsquo;t have examples that illustrate them clearly enough. In due time these issues will be addressed &ndash; just keep them in mind for now.
格式, 文件格式</p>

<!--more-->


<pre><code>使用 UTF-8 作为文件的编码。

缩进使用 两个空格，别用 Tab 格式，Tab将会导致到了其他环境排版混乱。

使用 Unix 的换行格式， (Linux/OSX 用户默认就是这样的，Windows 用户这里要多加注意)

    如果你在 Windows 下面，并且使用 Git，可以用下面的方式做调整：

    $ git config --global core.autocrlf true

在逗号，分号，冒号，运算符号的左右留下一个空格。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sum</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="o">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;Hi&#39;</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">e</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>唯一的例外是当你在做指数运算的时候，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="n">e</span> <span class="o">=</span> <span class="n">M</span> <span class="o">*</span> <span class="n">c</span> <span class="o">**</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="n">e</span> <span class="o">=</span> <span class="n">M</span> <span class="o">*</span> <span class="n">c</span><span class="o">**</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>(, [ 的后面，或 ], ) 的前面别敲空格。</p>

<p>some(arg).other
[1, 2, 3].length</p>

<p>when 和 case相同缩进。我知道很多人不赞同这点，但这是 &ldquo;The Ruby Programming Language&rdquo; and &ldquo;Programming Ruby&#8221;两本书共同沿袭的风格。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span>
</span><span class='line'><span class="k">when</span> <span class="n">song</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s1">&#39;Misty&#39;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;Not again!&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="n">song</span><span class="o">.</span><span class="n">duration</span> <span class="o">&gt;</span> <span class="mi">120</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;Too long!&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">21</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;It&#39;s too late&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">song</span><span class="o">.</span><span class="n">play</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">kind</span> <span class="o">=</span> <span class="k">case</span> <span class="n">year</span>
</span><span class='line'>       <span class="k">when</span> <span class="mi">1850</span><span class="o">.</span><span class="n">.</span><span class="mi">1889</span> <span class="k">then</span> <span class="s1">&#39;Blues&#39;</span>
</span><span class='line'>       <span class="k">when</span> <span class="mi">1890</span><span class="o">.</span><span class="n">.</span><span class="mi">1909</span> <span class="k">then</span> <span class="s1">&#39;Ragtime&#39;</span>
</span><span class='line'>       <span class="k">when</span> <span class="mi">1910</span><span class="o">.</span><span class="n">.</span><span class="mi">1929</span> <span class="k">then</span> <span class="s1">&#39;New Orleans Jazz&#39;</span>
</span><span class='line'>       <span class="k">when</span> <span class="mi">1930</span><span class="o">.</span><span class="n">.</span><span class="mi">1939</span> <span class="k">then</span> <span class="s1">&#39;Swing&#39;</span>
</span><span class='line'>       <span class="k">when</span> <span class="mi">1940</span><span class="o">.</span><span class="n">.</span><span class="mi">1950</span> <span class="k">then</span> <span class="s1">&#39;Bebop&#39;</span>
</span><span class='line'>       <span class="k">else</span> <span class="s1">&#39;Jazz&#39;</span>
</span><span class='line'>       <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>用空行来分割def以及方法中的逻辑段。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">some_method</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="kp">initialize</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span><span class="o">.</span><span class="n">manipulate!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span><span class="o">.</span><span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">some_method</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>如果方法的参数出现在多行，则将它们对齐。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 开始时是这样（太长了）</span>
</span><span class='line'><span class="k">def</span> <span class="nf">send_mail</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Mailer</span><span class="o">.</span><span class="n">deliver</span><span class="p">(</span><span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;bob@example.com&#39;</span><span class="p">,</span> <span class="ss">from</span><span class="p">:</span> <span class="s1">&#39;us@example.com&#39;</span><span class="p">,</span> <span class="ss">subject</span><span class="p">:</span> <span class="s1">&#39;Important message&#39;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="n">source</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 不好的（普通缩进）</span>
</span><span class='line'><span class="k">def</span> <span class="nf">send_mail</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Mailer</span><span class="o">.</span><span class="n">deliver</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;bob@example.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">from</span><span class="p">:</span> <span class="s1">&#39;us@example.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">subject</span><span class="p">:</span> <span class="s1">&#39;Important message&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">body</span><span class="p">:</span> <span class="n">source</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 不好的（双倍缩进）</span>
</span><span class='line'><span class="k">def</span> <span class="nf">send_mail</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Mailer</span><span class="o">.</span><span class="n">deliver</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;bob@example.com&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">from</span><span class="p">:</span> <span class="s1">&#39;us@example.com&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">subject</span><span class="p">:</span> <span class="s1">&#39;Important message&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">body</span><span class="p">:</span> <span class="n">source</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="k">def</span> <span class="nf">send_mail</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Mailer</span><span class="o">.</span><span class="n">deliver</span><span class="p">(</span><span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;bob@example.com&#39;</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">from</span><span class="p">:</span> <span class="s1">&#39;us@example.com&#39;</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">subject</span><span class="p">:</span> <span class="s1">&#39;Important message&#39;</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">body</span><span class="p">:</span> <span class="n">source</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用RDoc以及它的约定来写API文档，并且不要在注释块与def中加入空行。*</p>

<p>保持一行的长度小于80个字符。*</p>

<p>Emacs用户可以将如下内容加入配置中*</p>

<p>(e.g. ~/.emacs.d/init.el)：</p>

<p>(setq whitespace-line-count 80</p>

<pre><code>  whitespace-style '(lines))
</code></pre>

<p>Vim用户可以将如下内容加入配置中
(e.g. ~/.vimrc)：</p>

<pre><code>```vim
" VIM 7.3+ has support for highlighting a specified column.
if exists('+colorcolumn')
    set colorcolumn=80
else
    " Emulate
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%80v.\+', -1)
endif
```
</code></pre>

<p>Textmate</p>

<p>避免行尾空白符。</p>

<p>Emacs用户可以将如下内容加入配置中(最好是接在上面的例子之后)：</p>

<p>(setq whitespace-style &lsquo;(trailing space-before-tab</p>

<pre><code>                     indentation space-after-tab))
</code></pre>

<p>Vim用户可以将以下内容添加至~/.vimrc：</p>

<p>autocmd BufWritePre * :%s/\s+$//e</p>

<p>如果你不希望Vim破坏一些基于空格符的文件，你可以这样做：</p>

<p>set listchars+=trail:░</p>

<p>如果你不喜欢上面的建议，你也可以使用其它的字符来代替上面的。</p>

<p>Textmate用户可以看一下 Uber Glory bundle.</p>

<p>Syntax</p>

<p>在有参数时为def加上括号，在方法不接受任何参数时省略括号。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">some_method</span>
</span><span class='line'>  <span class="c1"># body omitted</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">some_method_with_arguments</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># body omitted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>不要使用for，除非你很清楚为什么需要这么做。绝大多数情况下都可以使用each来代替for。要注意的是，for不会开启一个新的作用域（正好与each相反），在其中定义的变量在其外是可见的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="k">for</span> <span class="n">elem</span> <span class="k">in</span> <span class="n">arr</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">elem</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">elem</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">elem</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">不要在跨行的</span><span class="k">if</span><span class="o">/</span><span class="k">unless</span><span class="err">中使用</span><span class="k">then</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="k">if</span> <span class="n">some_condition</span> <span class="k">then</span>
</span><span class='line'>  <span class="c1"># body omitted</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="k">if</span> <span class="n">some_condition</span>
</span><span class='line'>  <span class="c1"># body omitted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用条件运算符而不是if/then/else/end，它们最通用并且更简洁。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="k">then</span> <span class="n">something</span> <span class="k">else</span> <span class="n">something_else</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">some_condition</span> <span class="p">?</span> <span class="n">something</span> <span class="p">:</span> <span class="n">something_else</span>
</span><span class='line'>
</span><span class='line'><span class="err">在条件运算符中确保每个分支只包含一个表达式。即条件运算符在使用时不要嵌套，这种时候</span><span class="k">if</span><span class="o">/</span><span class="k">else</span><span class="err">是更好的选择。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="n">some_condition</span> <span class="p">?</span> <span class="p">(</span><span class="n">nested_condition</span> <span class="p">?</span> <span class="n">nested_something</span> <span class="p">:</span> <span class="n">nested_something_else</span><span class="p">)</span> <span class="p">:</span> <span class="n">something_else</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="k">if</span> <span class="n">some_condition</span>
</span><span class='line'>  <span class="n">nested_condition</span> <span class="p">?</span> <span class="n">nested_something</span> <span class="p">:</span> <span class="n">nested_something_else</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">something_else</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>不要使用if x: &hellip;，它在Ruby 1.9中被移除了，使用条件运算符代替。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span><span class="p">:</span> <span class="n">something</span> <span class="k">else</span> <span class="n">something_else</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">some_condition</span> <span class="p">?</span> <span class="n">something</span> <span class="p">:</span> <span class="n">something_else</span>
</span></code></pre></td></tr></table></div></figure>


<p>在单行使用when时使，用when x then &hellip;，另一个语法when x: &hellip;在Ruby 1.9中被移除了。</p>

<p>不要使用when x: &hellip;，原因看上一条。</p>

<p>在布尔表达式中使用&amp;&amp;/||，在流程控制时使用and/or（如果你在使用时发现需要添加额外的括号来表达逻辑，这说明你很可能用错了运算符）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 布尔表达式</span>
</span><span class='line'><span class="k">if</span> <span class="n">some_condition</span> <span class="o">&amp;&amp;</span> <span class="n">some_other_condition</span>
</span><span class='line'>  <span class="n">do_something</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 流程控制</span>
</span><span class='line'><span class="n">document</span><span class="o">.</span><span class="n">saved?</span> <span class="ow">or</span> <span class="n">document</span><span class="o">.</span><span class="n">save!</span>
</span></code></pre></td></tr></table></div></figure>


<p>语句跨行时不要使用?:（条件运算符），使用if/unless替代。</p>

<p>在执行体仅有一行的情况下使用作为修饰符形式的if/unless。另一个选择是使用and/or来做流程控制。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="k">if</span> <span class="n">some_condition</span>
</span><span class='line'>  <span class="n">do_something</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="n">do_something</span> <span class="k">if</span> <span class="n">some_condition</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 另一个好的选择</span>
</span><span class='line'><span class="n">some_condition</span> <span class="ow">and</span> <span class="n">do_something</span>
</span></code></pre></td></tr></table></div></figure>


<p>在表示否定语义时使用unless而不是if（或者可以使用or做流程控制）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="n">do_something</span> <span class="k">if</span> <span class="o">!</span><span class="n">some_condition</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="n">do_something</span> <span class="k">unless</span> <span class="n">some_condition</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 另一个好的选择</span>
</span><span class='line'><span class="n">some_condition</span> <span class="ow">or</span> <span class="n">do_something</span>
</span></code></pre></td></tr></table></div></figure>


<p>不要将unless与else一起使用，将其的语义重写为肯定形式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="k">unless</span> <span class="n">success?</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;failure&#39;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;success&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="k">if</span> <span class="n">success?</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;success&#39;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;failure&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>不要在if/unless/while之后使用括号，除非条件中包含了赋值操作（参看下方关于使用=返回结果的部分）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># body omitted</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">10</span>
</span><span class='line'>  <span class="c1"># body omitted</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">next_value</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># body omitted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在使用DSL（如Rake，Rails，RSpec）定义的方法，以及Ruby中看起来像关键字的方法时（如attr_reader，puts，属性的访问）忽略其参数两边的括号。其它的情况下则使用括号将参数包裹起来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># omitted</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">temperance</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Temperance&#39;</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
</span><span class='line'><span class="n">temperance</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">temperance</span><span class="o">.</span><span class="n">age</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="no">Math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在代码块只有一行的情况下使用{&hellip;}而不是do&hellip;end。避免在代码块跨行时使用{&hellip;}（同样避免跨行时进行链式调用，如下方代码中最后一例）。在流程控制及方法定义（如Rakefiles或其它DSL）时使使用do&hellip;end。不在链式调用时使用do&hellip;end。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Bozhidar&quot;</span><span class="p">,</span> <span class="s2">&quot;Steve&quot;</span><span class="p">,</span> <span class="s2">&quot;Sarah&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">puts</span> <span class="nb">name</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;S&quot;</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">upcase</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">name</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;S&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">upcase</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有些人可能认为在跨行进行链式调用时使用{&hellip;}是可行的，但是他们需要问问自己的是 &ndash; 这样的代码是否真的具有良好的可读性 and can&rsquo;t the blocks contents be extracted into nifty methods。</p>

<p>在不必要的情况下，避免显示的使用return进行返回。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="n">some_arr</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">some_arr</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="n">some_arr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">some_arr</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>在设置具有默认值的参数时，在=两边添加空格。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="n">arg1</span><span class="o">=</span><span class="ss">:default</span><span class="p">,</span> <span class="n">arg2</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="n">arg3</span><span class="o">=[]</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># do something...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="n">arg1</span> <span class="o">=</span> <span class="ss">:default</span><span class="p">,</span> <span class="n">arg2</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">arg3</span> <span class="o">=</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># do something...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>有些Ruby书籍提倡使用第一种风格，但是第二种在实际使用时往往具表现得更好（有些证据可以证明它们具有更好的可读性）。</p>

<p>在不必要的情况下，不使用行连接符（\），实际上，在任何情况下都不需要使用它们。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">\</span>
</span><span class='line'>         <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的（但其实还是很糟糕）</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">-</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用=（赋值符号）的返回作为表达式的值是可以的，但是记得在记得在两边加上括号。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 好的 - 表明了赋值的意图</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/foo/</span><span class="p">))</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="k">if</span> <span class="n">v</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/foo/</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的 - 不仅表明了赋值，还表明了正确的优先级</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">next_value</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;hello&quot;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>尽可能的使用||=来初始化变量。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 如果name的值为nil或false，则将name的值设为Bozhidar，否则将name的值设为name本身的值（即不进行赋值）。</span>
</span><span class='line'><span class="nb">name</span> <span class="o">||=</span> <span class="s1">&#39;Bozhidar&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">不要在初始化布尔型变量时使用</span><span class="o">||=</span><span class="err">（想想如果变量本身的值是</span><span class="kp">false</span><span class="err">是会是什么情况）。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 不好的 - 会将enabled设为true，即使enabled本身的值是false。</span>
</span><span class='line'><span class="n">enabled</span> <span class="o">||=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="n">enabled</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">enabled</span><span class="o">.</span><span class="n">nil?</span>
</span></code></pre></td></tr></table></div></figure>


<p>避免使用Perl风格的特殊变量（如$0-9，$`等）。它们看起来很神秘，不鼓励在除了单行脚本以外的地方使用它们。
在调用方法时，永远不要在方法名和开括号之间添加空格。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="n">f</span> <span class="p">(</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="n">f</span><span class="p">(</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果方法的第一个参数以开括号打头，则在调用时总是使用括号包裹全部参数，如f((3 + 2) + 1)。</p>

<p>在使用Ruby解释器时总是为其添加-w参数，它可以提醒你以上的规则！</p>

<p>当Hash的键为Symbol时，使用Ruby 1.9的字面量语法来表示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:one</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:two</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">one</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">two</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用最新的lambda字面量语法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="nb">lambda</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="p">}</span>
</span><span class='line'><span class="nb">lambda</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="nb">lambda</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="p">}</span>
</span><span class='line'><span class="nb">lambda</span><span class="o">.</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用_来表示无用的代码块参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好的</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>命名</p>

<pre><code>The only real difficulties in programming are cache invalidation and
naming things. 
-- Phil Karlton

方法及变量名使用诸如snake_case的形式。
类及模块名使用诸如CamelCase的形式（保持HTTP，RFC，XML等采用首字母缩写表示的单词为全部大写的形式）。
其它常量名使用诸如SCREAMING_SNAKE_CASE的形式。
在表示断言的方法名（返回真或者假）的末尾添加一个问号（如Array#empty?）。
可能会造成潜在“危险”的方法名（如修改self或者在原处修改变量的方法，exit!等）应该在末尾添加一个感叹号。
在较短的代码块中使用reduce时，为其参数起名为|a, e|（）When using reduce with short blocks, name the arguments |a, e| (accumulator, element)。
</code></pre>

<p>在定义二元操作符方法时，将其的参数取名为other。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># body omitted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>map优先于collect，find优先于detect，select优先于find_all，
reduce优先于inject，size优先于length。以上的规则并不绝定，如果
使用后者能提高代码的可读性，那么尽管使用它们。押韵的方法名（如collect，
detect，inject）继承于SmallTalk语言，它们在其它语言中并不是很通用。
鼓励使用select而不是find_all是因为select与reject一同使用时很不错，
并且它的名字具有很好的自解释性。
</code></pre>

<p>注释</p>

<pre><code>Good code is its own best documentation. As you're about to add a
comment, ask yourself, "How can I improve the code so that this
comment isn't needed?" Improve the code and then document it to make
it even clearer. 
-- Steve McConnell

写出可以“自解释”的代码，然后忽略后面的内容，这不是在开玩笑！
Comments longer than a word are capitalized and use punctuation. Use one space after periods.

避免无意义的注释。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 不好的</span>
</span><span class='line'><span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c1"># increments counter by one</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>时常更新现有的注释。没有注释优于过时的注释。

不要为糟糕的代码写注释。重构它们，使它们能够“自解释”。(Do or do not - there is no try.)
</code></pre>

<p>注解</p>

<pre><code>代码的注解应该总是写在被注释代码的上面, 并且紧贴被注释代码.
注解的标题应该紧跟一个冒号以及一个空格, 用来突出显示该注释描述的内容.

如果需要多行注释, 第二行注释应该在#之后缩进两个空格.(译者注: 以上两条规则在Ruby源码中都不多看到, 前者在Lisp源码较多见, 而后者从没见过)
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>  <span class="c1"># FIXME: This has crashed occasionally since v3.2.1. It may</span>
</span><span class='line'>  <span class="c1">#   be related to the BarBazUtil upgrade.</span>
</span><span class='line'>  <span class="n">baz</span><span class="p">(</span><span class="ss">:quux</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>如果代码很直白, 添加注解就显得多余, 也可以在代码所在行的尾部提供简短的注解说明.不过这应该在很少的情况下使用, 并且不被提倡.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">100</span> <span class="c1"># OPTIMIZE</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>使用TODO标题描述 漏掉的功能或打算加入的新特性
使用FIXME标题描述 需要被修复的有问题代码
使用OPTIMIZE标题描述 可能有性能瓶颈, 需要优化的代码.
使用HACK标题描述 感觉上需要重构的代码
使用REVIEW标题描述 关键性代码, 需要稍后不断的检查该代码是否工作正确.
只要对阅读代码有帮助, 也可以使用其他直白的注解标题, 但记得在README中注明.
</code></pre>

<p>类相关</p>

<pre><code>当设计一个类时, 务必记住LSP原则.(译者注: LSP原则大概含义为: 如果一个函数中引用了`父类的实例', 则一定可以使用其子类的实例替代, 并且函数的基本功能不变. (虽然功能允许被扩展)
尽量使你的类更加健壮, 稳固.

为你自己的类定义to_s方法, 用来表现这个类实例对象的字符化表现形式.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
</span><span class='line'>    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#@first_name#@last_name</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>尽量使用attr来定义属性访问器或修改器方法.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
</span><span class='line'>    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">first_name</span>
</span><span class='line'>    <span class="vi">@first_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">last_name</span>
</span><span class='line'>    <span class="vi">@last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
</span><span class='line'>    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>考虑添加工厂方法, 用以灵活的创建一个特定类的实例.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="n">options_hash</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># body omitted</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>Ruby的基本价值观之一: duck-typing优先于继承.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="c1"># abstract method</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">speak</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># extend superclass</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Duck</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">speak</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Quack! Quack&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># extend superclass</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">speak</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Bau! Bau!&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Duck</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">speak</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Quack! Quack&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">speak</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Bau! Bau!&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>应该总是避免使用类变量.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Parent</span>
</span><span class='line'>  <span class="vc">@@class_var</span> <span class="o">=</span> <span class="s1">&#39;parent&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">print_class_var</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="vc">@@class_var</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Parent</span>
</span><span class='line'>  <span class="vc">@@class_var</span> <span class="o">=</span> <span class="s1">&#39;child&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Parent</span><span class="o">.</span><span class="n">print_class_var</span> <span class="c1"># =&gt; will print &quot;child&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>正如上例看到的, 所有的类实例共享类变量, 并且可以直接修改类变量,此时使用类实例变量是更好的主意.

总是为类的实例方法定义适当的可见性.(private, protected, private), 不应该总是使用public (默认可见性为public), 这不是Python!

可见性关键字应该和方法定义有相同的缩进, 并且不同的关键字之间要空行分隔.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">public_method</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">private_method</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>总是使用self来定义单例方法. 当代码重构时, 这将使得方法定义代码更加具有灵活性.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TestClass</span>
</span><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">TestClass</span><span class="o">.</span><span class="nf">some_method</span>
</span><span class='line'>    <span class="c1"># body omitted</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># good</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">some_other_method</span>
</span><span class='line'>    <span class="c1"># body omitted</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Also possible and convenient when you</span>
</span><span class='line'>  <span class="c1"># have to define many singleton methods.</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">first_method</span>
</span><span class='line'>      <span class="c1"># body omitted</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">second_method_etc</span>
</span><span class='line'>      <span class="c1"># body omitted</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>异常处理</p>

<pre><code>尽量不要抑制异常被正常抛出.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="c1"># an exception occurs here</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">SomeError</span>
</span><span class='line'>  <span class="c1"># the rescue clause does absolutely nothing</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>不要使用异常来代替流程控制语句.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">/</span> <span class="n">d</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">ZeroDivisionError</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Cannot divide by 0!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">zero?</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Cannot divide by 0!&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">/</span> <span class="n">d</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>应该总是避免拦截最顶级的Exception异常类.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad </span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="c1"># an exception occurs here</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="c1"># exception handling</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># still bad</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="c1"># an exception occurs here</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span>
</span><span class='line'>  <span class="c1"># exception handling</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>将更具体(或特殊的)的异常处理代码放在通用的异常处理代码之前.
否则, 这些异常处理代码永远不会被处理.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="c1"># some code</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="c1"># some handling</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">StandardError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="c1"># some handling</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="c1"># some code</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">StandardError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="c1"># some handling</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="c1"># some handling</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>使用ensure语句, 来确保总是执行一些特地的操作.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;testfile&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="c1"># .. process</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="c1"># .. handle error</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">close</span> <span class="k">unless</span> <span class="n">f</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>除非必要, 尽可能使用Ruby现有的异常类. (而不是总派生自己的异常类)
</code></pre>

<p>集合</p>

<pre><code>总是使用%w的方式来定义字符串数组.(译者注: w表示英文单词word, 而且定义之间千万不能有逗号)
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="no">STATES</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;draft&#39;</span><span class="p">,</span> <span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="s1">&#39;closed&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="no">STATES</span> <span class="o">=</span> <span class="sx">%w(draft open closed)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>避免直接引用靠后的数组元素, 这样隐式的之前的元素都被赋值为nil.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">arr</span><span class="o">[</span><span class="mi">100</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># now you have an array with lots of nils</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>如果要确保元素唯一, 则使用Set代替Array.Set更适合于无顺序的, 并且元素唯一的集合, 集合具有类似于数组一致性操作以及哈希的快速查找.

尽可能使用hash代替字符串作为哈希键.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">one</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">two</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">three</span><span class="p">:</span> <span class="mi">3</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>避免使用易变对象作为哈希键.

应该尽可能的使用Ruby1.9的新哈希语法.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:one</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:two</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:three</span> <span class="o">=&gt;</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">one</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">two</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">three</span><span class="p">:</span> <span class="mi">3</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>记住, 在Ruby1.9中, 哈希的表现不再是无序的. (译者注: Ruby1.9将会记住元素插入的序列)

当遍历一个集合的同时, 不要修改这个集合.
</code></pre>

<p>字符串</p>

<pre><code>优先使用字符串插值来代替字符串串联.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="n">email_with_name</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s1">&#39; &lt;&#39;</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">+</span> <span class="s1">&#39;&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="n">email_with_name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> &lt;</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="s2">&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>当不需要使用字符串插值或某些特殊字符时, 应该优先使用单引号.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;Bozhidar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="s1">&#39;Bozhidar&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>当使用字符串插值替换实例变量时, 应该省略{}.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
</span><span class='line'>    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@first_name</span><span class="si">}#{</span><span class="vi">@last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># good</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#@first_name#@last_name</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>操作较大的字符串时, 避免使用+, 如果需要修改被操作字符串, 应该总是使用&lt;&lt;作为代替.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># good and also fast</span>
</span><span class='line'><span class="n">html</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;&lt;h1&gt;Page title&lt;/h1&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">paragraphs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">paragraph</span><span class="o">|</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;&lt;p&gt;</span><span class="si">#{</span><span class="n">paragraph</span><span class="si">}</span><span class="s2">&lt;/p&gt;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>正则表达式</p>

<pre><code>如果只是需要查找普通字符串, 不要使用RE. 例如: string['text'] (译者注: 示例什么意思?)

针对简单的结构, 你可以直接使用string[/RE/]的方式来查询. (译者注: string[]难道是新添加的语法?)

match = string[/regexp/]             # get content of matched regexp
first_group = string[/text(grp)/, 1] # get content of captured group
string[/text (grp)/, 1] = 'replace'  # string =&gt; 'text replace'

当无需引用分组内容时, 应该使用(?:RE)代替(RE). (会提高性能)

/(first|second)/   # bad
/(?:first|second)/ # good

避免使用$1-$9风格的分组引用, 而应该使用1.9新增的命名分组来代替.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="sr">/(regexp)/</span> <span class="o">=~</span> <span class="n">string</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">process</span> <span class="vg">$1</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="sr">/(?&lt;meaningful_var&gt;regexp)/</span> <span class="o">=~</span> <span class="n">string</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">process</span> <span class="n">meaningful_var</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>有关RE集合[...], 他们只有以下几个特殊关键字值得注意: ^, -, \, ], 所以, 不要在集合中, 转义.或者[, 他们是正常字符.

注意, ^和$, 他们匹配行首和行尾, 而不是一个字符串的结尾, 如果你想匹配整个字符串, 用\A和\E. (译者注, A和Z分别为英文的第一个和最后一个字符)

string = "some injection\nusername"
string[/^username$/]   # matches
string[/\Ausername\Z/] # don't match

使用x修饰符来匹配复杂的表达式, 这将使得RE更具可读性, 你可以添加一些有用的注释.
注意, 所有空格将被忽略.

regexp = %r{
  start         # some text
  \s            # white space char
  (group)       # first group
  (?:alt1|alt2) # some alternation
  end
}x

gusb和sub也支持哈希以及代码块形式语法, 可用于复杂情形下的替换操作.
百分号

应该大量的使用%w.

应该使用%()的方式, 来定义需要字符串插值以及包含"符号的单行字符串.多行字符串, 尽量使用here doc格式. (译者注: 我好喜欢%()的方式, 可能是%()比%{}写起来方便的缘故)

# bad (no interpolation needed)
%(&lt;div class="text"&gt;Some text&lt;/div&gt;)
# should be '&lt;div class="text"&gt;Some text&lt;/div&gt;'

# bad (no double-quotes)
%(This is #{quality} style)
# should be "This is #{quality} style"

# bad (multiple lines)
%(&lt;div&gt;\n&lt;span class="big"&gt;#{exclamation}&lt;/span&gt;\n&lt;/div&gt;)
# should be a heredoc.

# good (requires interpolation, has quotes, single line)
%(&lt;tr&gt;&lt;td class="name"&gt;#{name}&lt;/td&gt;)

使用%r的方式定义包含多个/符号的正则表达式.

# bad
%r(\s+)

# still bad
%r(^/(.*)$)
# should be /^\/(.*)$/

# good
%r(^/blog/2011/(.*)$)

尽量避免%q, %Q, %x, %s, 和%W.

优先使用()作为%类语法格式的分隔符.(译者注, 本人很喜欢%(...), 不过Programming Ruby中, 显然更喜欢使用%{}的方式)
</code></pre>

<p>元编程</p>

<pre><code>在写自己的库时, 不要进行不必要的元编程(例如修改核心库, 不需要给他们猴子补丁).
</code></pre>

<p>杂项</p>

<pre><code>总是打开Ruby -w开关. 应该写没有警告提示的代码.
通常情况下, 尽量避免使用哈希作为方法参数. (此时应该考虑这个方法是不是功能太多?)
避免一个方法内容超过10行代码, 理想情况下, 大多数方法内容应该少于5行.(不算空行)
尽量避免方法的参数超过三个.
有时候, 必须用到全局方法, 应该增加这些方法到Kernel模块.

尽可能使用类实例变量代替全局变量. (译者注:是类实例变量, 而不是类的实例变量. 汗~~)
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#bad</span>
</span><span class='line'><span class="vg">$foo_bar</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#good</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:bar</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">bar</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>尽可能的使用alias_method 代替 alias.

使用OptionParser来解析复杂的命令行选项, 较简单的命令行, -s参数即可处理.

按照功能来编写方法, 当方法名有意义时, 应该避免方法功能被唐突的改变.

避免不需要的元编程.

除非必要, 避免更改已经定义的方法的参数.

避免超过三级的代码块嵌套.

应该持续性的遵守以上指导方针.

尽量使用(生活中的)常识.
</code></pre>

<p>转载自：<a href="http://ruby-china.org/wiki/coding-style">http://ruby-china.org/wiki/coding-style</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 风格指导]]></title>
    <link href="http://tianshuai.github.io/blog/2013/03/28/rails-feng-ge-zhi-dao/"/>
    <updated>2013-03-28T14:20:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/03/28/rails-feng-ge-zhi-dao</id>
    <content type="html"><![CDATA[<p>感谢译者。</p>

<p>本页用于介绍 Ruby 社区首推的Rails代码编写风格，翻译来自: <a href="https://github.com/JuanitoFatas/rails-style-guide">https://github.com/JuanitoFatas/rails-style-guide</a>
序幕</p>

<pre><code>风格是从伟大事物中分离出的美好事物。 
 Bozhidar Batsov
</code></pre>

<p>这份指南目的于演示一整套 Rails 3 开发的风格惯例及最佳实践。这是一份与由现存社群所驱动的Ruby 编码风格指南互补的指南。</p>

<p>而本指南中测试 Rails 应用小节摆在开发 Rails 应用之后，因为我相信行为驱动开发
(BDD) 是最佳的软体开发之道。铭记在心吧。</p>

<p>Rails 是一个坚持己见的框架，而这也是一份坚持己见的指南。在我的心里，我坚信 RSpec 优于 Test::Unit，Sass 优于 CSS 以及
Haml，(Slim) 优于 Erb. 所以不要期望在这里找到 Test::Unit, CSS 及 Erb 的忠告。</p>

<p>某些忠告仅适用于 Rails 3.1+ 以上版本。</p>

<!--more-->


<p>你可以使用 Transmuter 来产生本指南的一份 PDF 或 HTML 复本。
开发 Rails 应用程序
配置</p>

<pre><code>把惯用的初始化代码放在 config/initializers。 在 initializers 内的代码于应用启动时执行。
跟每一个 gem 相关的初始化代码应当使用同样的名称，放在不同的文件里，如： carrierwave.rb, active_admin.rb, 等等。

相应调整配置开发、测试及生产环境（在 config/environments/ 下对应的文件）

    标记额外的资产给（如有任何）预编译：

    # config/environments/production.rb
    # Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)
    config.assets.precompile += %w( rails_admin/rails_admin.css rails_admin/rails_admin.js )

创立一个与生产环境相似的额外 staging 环境。
</code></pre>

<p>路由</p>

<pre><code>当你需要加入一个或多个动作至一个 RESTful 资源时（你真的需要吗？），使用 member and collection 路由。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 差</span>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;subscriptions/:id/unsubscribe&#39;</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:subscriptions</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:subscriptions</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;unsubscribe&#39;</span><span class="p">,</span> <span class="ss">:on</span> <span class="o">=&gt;</span> <span class="ss">:member</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 差</span>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;photos/search&#39;</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:photos</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:photos</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;search&#39;</span><span class="p">,</span> <span class="ss">:on</span> <span class="o">=&gt;</span> <span class="ss">:collection</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">若你需要定义多个</span> <span class="n">member</span><span class="o">/</span><span class="n">collection</span> <span class="err">路由时，使用替代的区块语法。</span>
</span><span class='line'>
</span><span class='line'><span class="n">resources</span> <span class="ss">:subscriptions</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">member</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;unsubscribe&#39;</span>
</span><span class='line'>    <span class="c1"># 更多路由</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">resources</span> <span class="ss">:photos</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">collection</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;search&#39;</span>
</span><span class='line'>    <span class="c1"># 更多路由</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>使用嵌套路由来更佳地表达与 ActiveRecord 模型的关系。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Comments</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:post</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># routes.rb</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:posts</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:comments</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">使用命名空间路由来群组相关的行为。</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:admin</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Directs /admin/products/* to Admin::ProductsController</span>
</span><span class='line'>  <span class="c1"># (app/controllers/admin/products_controller.rb)</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:products</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">不要使用合法的疯狂路由。这种路由会让每个控制器的动作透过</span> <span class="no">GET</span> <span class="err">请求存取。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># very bad</span>
</span><span class='line'><span class="n">match</span> <span class="s1">&#39;:controller(/:action(/:id(.:format)))&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>控制器</p>

<pre><code>让你的控制器保持苗条 ― 它们应该只替视图层取出数据且不包含任何业务逻辑（所有业务逻辑应理所当然地放在模型里）。
每个控制器的行动应当（理想上）只调用一个除了初始的 find 或 new 方法
控制器与视图之间共享不超过两个实例变数
</code></pre>

<p>模型</p>

<pre><code>自由地引入不是 ActiveRecord 的类别吧。 Introduce non-ActiveRecord model classes freely.
替模型命名有意义（但简短）且不带缩写的名字。

如果你需要支援 ActiveRecord 像是验证行为的模型对象，使用 ActiveAttr gem.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Message</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">ActiveAttr</span><span class="p">:</span><span class="ss">:Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attribute</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">attribute</span> <span class="ss">:email</span>
</span><span class='line'>  <span class="n">attribute</span> <span class="ss">:content</span>
</span><span class='line'>  <span class="n">attribute</span> <span class="ss">:priority</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:content</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">validates_format_of</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="sr">/^[-a-z0-9_+\.]+\@([-a-z0-9]+\.)+[a-z0-9]{2,4}$/i</span>
</span><span class='line'>  <span class="n">validates_length_of</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">:maximum</span> <span class="o">=&gt;</span> <span class="mi">500</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>更完整的示例，参考 RailsCast on the subject。
</code></pre>

<p>ActiveRecord</p>

<pre><code>避免改动缺省的ActiveRecord（表的名字、主键，等等），除非你有一个非常好的理由（像是不受你控制的数据库）。
把宏风格的方法放在类别定义的前面（has_many, validates, 等等）。

偏好 has_many :through 胜于 has_and_belongs_to_many。 使用 has_many :through 允许在 join 模型有附加的属性及验证
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 使用 has_and_belongs_to_many</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_and_belongs_to_many</span> <span class="ss">:groups</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Group</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_and_belongs_to_many</span> <span class="ss">:users</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 偏好方式 - using has_many :through</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:memberships</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:groups</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:memberships</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Membership</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:group</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Group</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:memberships</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:memberships</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>使用新的 "sexy" validation。

当一个惯用的验证使用超过一次或验证是某个正则表达映射时，创建一个惯用的 validator 文件。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 差</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="p">{</span> <span class="ss">with</span><span class="p">:</span> <span class="sr">/^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好</span>
</span><span class='line'><span class="k">class</span> <span class="nc">EmailValidator</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:EachValidator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate_each</span><span class="p">(</span><span class="n">record</span><span class="p">,</span> <span class="n">attribute</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">[</span><span class="n">attribute</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;is not a valid email&#39;</span><span class="p">)</span> <span class="k">unless</span> <span class="n">value</span> <span class="o">=~</span> <span class="sr">/^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>所有惯用的验证器应放在一个共享的 gem 。

自由地使用命名的作用域。

当一个由 lambda 及参数定义的作用域变得过于复杂时，更好的方式是建一个作为同样用途的类别方法，并返回 ActiveRecord::Relation 对象。

注意 update_attribute 方法的行为。它不运行模型验证（不同于 update_attributes ）并且可能把模型状态给搞砸。

使用用户友好的网址。在网址显示具描述性的模型属性，而不只是 id 。
有不止一种方法可以达成：

    覆写模型的 to_param 方法。这是 Rails 用来给对象建构网址的方法。缺省的实作会以字串形式返回该 id 的记录。它可被另一个人类可读的属性覆写。

    class Person
      def to_param
        "#{id} #{name}".parameterize
      end
    end

    为了要转换成对网址友好 (URL-friendly)的数值，字串应当调用 parameterize 。 对象的 id 要放在开头，以便给 ActiveRecord 的 find 方法查找。

    使用此 friendly_id gem。它允许藉由某些具描述性的模型属性，而不是用 id 来创建人类可读的网址。

    class Person
      extend FriendlyId
      friendly_id :name, use: :slugged
    end

    查看 gem 文档 获得更多关于使用的信息。
</code></pre>

<p>ActiveResource</p>

<pre><code>当 HTTP 响应是一个与存在的格式不同的格式时（XML 和 JSON），需要某些额外的格式解析，创一个你惯用的格式，并在类别中使用它。惯用的格式应当实作下列方法：extension, mime_type,
encode 以及 decode。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveResource</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Formats</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Extend</span>
</span><span class='line'>      <span class="k">module</span> <span class="nn">CSVFormat</span>
</span><span class='line'>        <span class="kp">extend</span> <span class="nb">self</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">extension</span>
</span><span class='line'>          <span class="s1">&#39;csv&#39;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">mime_type</span>
</span><span class='line'>          <span class="s1">&#39;text/csv&#39;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">encode</span><span class="p">(</span><span class="nb">hash</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>          <span class="c1"># 数据以新格式编码并返回</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">decode</span><span class="p">(</span><span class="n">csv</span><span class="p">)</span>
</span><span class='line'>          <span class="c1"># 数据以新格式解码并返回</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveResource</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">format</span> <span class="o">=</span> <span class="ss">ActiveResource</span><span class="p">:</span><span class="ss">:Formats</span><span class="o">::</span><span class="ss">Extend</span><span class="p">:</span><span class="ss">:CSVFormat</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>若 HTTP 请求应当不扩展发送时，覆写 ActiveResource::Base 的 element_path 及 collection_path 方法，并移除扩展的部份。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveResource</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">collection_path</span><span class="p">(</span><span class="n">prefix_options</span> <span class="o">=</span> <span class="p">{},</span> <span class="n">query_options</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">prefix_options</span><span class="p">,</span> <span class="n">query_options</span> <span class="o">=</span> <span class="n">split_options</span><span class="p">(</span><span class="n">prefix_options</span><span class="p">)</span> <span class="k">if</span> <span class="n">query_options</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">prefix</span><span class="p">(</span><span class="n">prefix_options</span><span class="p">)</span><span class="si">}#{</span><span class="n">collection_name</span><span class="si">}#{</span><span class="n">query_string</span><span class="p">(</span><span class="n">query_options</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">element_path</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">prefix_options</span> <span class="o">=</span> <span class="p">{},</span> <span class="n">query_options</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">prefix_options</span><span class="p">,</span> <span class="n">query_options</span> <span class="o">=</span> <span class="n">split_options</span><span class="p">(</span><span class="n">prefix_options</span><span class="p">)</span> <span class="k">if</span> <span class="n">query_options</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">prefix</span><span class="p">(</span><span class="n">prefix_options</span><span class="p">)</span><span class="si">}#{</span><span class="n">collection_name</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="no">URI</span><span class="o">.</span><span class="n">parser</span><span class="o">.</span><span class="n">escape</span> <span class="nb">id</span><span class="o">.</span><span class="n">to_s</span><span class="si">}#{</span><span class="n">query_string</span><span class="p">(</span><span class="n">query_options</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>如有任何改动网址的需求时，这些方法也可以被覆写。
</code></pre>

<p>迁移</p>

<pre><code>把 schema.rb 保存在版本管控下。
使用 rake db:scheme:load 取代 rake db:migrate 来初始化空的数据库。
使用 rake db:test:prepare 来更新测试数据库的 schema。

避免在表里设置缺省数据。使用模型层来取代。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">amount</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">[</span><span class="ss">:amount</span><span class="o">]</span> <span class="ow">or</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>然而 self[:attr_name] 的使用被视为相当常见的，你也可以考虑使用更罗嗦的（争议地可读性更高的） read_attribute 来取代：
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">amount</span>
</span><span class='line'>  <span class="n">read_attribute</span><span class="p">(</span><span class="ss">:amount</span><span class="p">)</span> <span class="ow">or</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>当编写建设性的迁移时（加入表或栏位），使用 Rails 3.1 的新方式来迁移 - 使用 change 方法取代 up 与 down 方法。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 过去的方式</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AddNameToPerson</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">up</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:persons</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">down</span>
</span><span class='line'>    <span class="n">remove_column</span> <span class="ss">:person</span><span class="p">,</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 新的偏好方式</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AddNameToPerson</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:persons</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">视图</span>
</span><span class='line'>
</span><span class='line'><span class="err">不要直接从视图调用模型层。</span>
</span><span class='line'><span class="err">不要在视图构造复杂的格式，把它们输出到视图</span> <span class="n">helper</span> <span class="err">的一个方法或是模型。</span>
</span><span class='line'><span class="err">使用</span> <span class="n">partial</span> <span class="err">模版与布局来减少重复的代码。</span>
</span><span class='line'>
</span><span class='line'><span class="err">加入</span>
</span><span class='line'><span class="n">client</span> <span class="n">side</span> <span class="n">validation</span>
</span><span class='line'><span class="err">至惯用的</span> <span class="n">validators</span><span class="err">。</span> <span class="err">要做的步骤有：</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">声明一个由</span> <span class="ss">ClientSideValidations</span><span class="p">:</span><span class="ss">:Middleware</span><span class="o">::</span><span class="no">Base</span> <span class="err">而来的自定</span> <span class="n">validator</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">module</span> <span class="nn">ClientSideValidations::Middleware</span>
</span><span class='line'>      <span class="k">class</span> <span class="nc">Email</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">response</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">/^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="mi">404</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>          <span class="k">super</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">建立一个新文件</span>
</span><span class='line'>    <span class="kp">public</span><span class="o">/</span><span class="n">javascripts</span><span class="o">/</span><span class="n">rails</span><span class="o">.</span><span class="n">validations</span><span class="o">.</span><span class="n">custom</span><span class="o">.</span><span class="n">js</span><span class="o">.</span><span class="n">coffee</span> <span class="err">并在你的</span> <span class="n">application</span><span class="o">.</span><span class="n">js</span><span class="o">.</span><span class="n">coffee</span> <span class="err">文件加入一个它的参照：</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># app/assets/javascripts/application.js.coffee</span>
</span><span class='line'>    <span class="c1">#= require rails.validations.custom</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">添加你的用户端</span> <span class="n">validator</span><span class="err">：</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#public/javascripts/rails.validations.custom.js.coffee</span>
</span><span class='line'>    <span class="n">clientSideValidations</span><span class="o">.</span><span class="n">validators</span><span class="o">.</span><span class="n">remote</span><span class="o">[</span><span class="s1">&#39;email&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="vg">$.</span><span class="n">ajax</span><span class="p">({</span>
</span><span class='line'>        <span class="ss">url</span><span class="p">:</span> <span class="s1">&#39;/validators/email.json&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">email</span><span class="p">:</span> <span class="n">element</span><span class="o">.</span><span class="n">val</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="ss">async</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>      <span class="p">})</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">404</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">options</span><span class="o">.</span><span class="n">message</span> <span class="o">||</span> <span class="s1">&#39;invalid e-mail format&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">国际化</span>
</span><span class='line'>
</span><span class='line'><span class="err">视图、模型与控制器里不应使用语言相关设置与字串。这些文字应搬到在</span> <span class="n">config</span><span class="o">/</span><span class="n">locales</span> <span class="err">下的语言文件里。</span>
</span><span class='line'>
</span><span class='line'><span class="err">当</span> <span class="no">ActiveRecord</span> <span class="err">模型的标签需要被翻译时，使用</span><span class="n">activerecord</span> <span class="err">作用域</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="ss">en</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">activerecord</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">models</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">user</span><span class="p">:</span> <span class="no">Member</span>
</span><span class='line'>    <span class="ss">attributes</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">user</span><span class="p">:</span>
</span><span class='line'>        <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Full name&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">然后</span> <span class="no">User</span><span class="o">.</span><span class="n">model_name</span><span class="o">.</span><span class="n">human</span> <span class="err">会返回</span> <span class="s2">&quot;Member&quot;</span> <span class="err">，而</span> <span class="no">User</span><span class="o">.</span><span class="n">human_attribute_name</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span> <span class="err">会返回</span> <span class="s2">&quot;Full name&quot;</span><span class="err">。这些属性的翻译会被视图作为标签使用。</span>
</span><span class='line'>
</span><span class='line'><span class="err">把在视图使用的文字与</span> <span class="no">ActiveRecord</span> <span class="err">的属性翻译分开。</span> <span class="err">把给模型使用的语言文件放在名为</span> <span class="n">models</span> <span class="err">的文件夹，给视图使用的文字放在名为</span> <span class="n">views</span> <span class="err">的文件夹。</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">当使用额外目录的语言文件组织完成时，为了要载入这些目录，要在</span> <span class="n">application</span><span class="o">.</span><span class="n">rb</span> <span class="err">文件里描述这些目录。</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># config/application.rb</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">i18n</span><span class="o">.</span><span class="n">load_path</span> <span class="o">+=</span> <span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="s1">&#39;locales&#39;</span><span class="p">,</span> <span class="s1">&#39;**&#39;</span><span class="p">,</span> <span class="s1">&#39;*.{rb,yml}&#39;</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="err">把共享的本土化选项，像是日期或货币格式，放在</span> <span class="n">locales</span> <span class="err">的根目录下。</span>
</span><span class='line'>
</span><span class='line'><span class="err">使用精简形式的</span> <span class="no">I18n</span> <span class="err">方法：</span> <span class="no">I18n</span><span class="o">.</span><span class="n">t</span> <span class="err">来取代</span> <span class="no">I18n</span><span class="o">.</span><span class="n">translate</span> <span class="err">以及使用</span> <span class="no">I18n</span><span class="o">.</span><span class="n">l</span> <span class="err">取代</span> <span class="no">I18n</span><span class="o">.</span><span class="n">localize</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="err">使用</span> <span class="s2">&quot;懒惰&quot;</span> <span class="err">查询视图中使用的文字。假设我们有以下结构：</span>
</span><span class='line'>
</span><span class='line'><span class="ss">en</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">users</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">show</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;User details page&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">users</span><span class="o">.</span><span class="n">show</span><span class="o">.</span><span class="n">title</span> <span class="err">的数值能这样被</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">users</span><span class="o">/</span><span class="n">show</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">haml</span> <span class="err">查询：</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span> <span class="n">t</span> <span class="s1">&#39;.title&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">在控制器与模型使用点分隔的键，来取代指定</span> <span class="ss">:scope</span> <span class="err">选项。点分隔的调用更容易阅读及追踪层级。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 这样子调用使用</span>
</span><span class='line'><span class="no">I18n</span><span class="o">.</span><span class="n">t</span> <span class="s1">&#39;activerecord.errors.messages.record_invalid&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 而不是这样</span>
</span><span class='line'><span class="no">I18n</span><span class="o">.</span><span class="n">t</span> <span class="ss">:record_invalid</span><span class="p">,</span> <span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:activerecord</span><span class="p">,</span> <span class="ss">:errors</span><span class="p">,</span> <span class="ss">:messages</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="err">关于</span> <span class="no">Rails</span> <span class="n">i18n</span> <span class="err">更详细的信息可以在这里找到</span> <span class="no">Rails</span> <span class="no">Guides</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="no">Assets</span>
</span><span class='line'>
</span><span class='line'><span class="err">利用这个</span> <span class="n">assets</span> <span class="n">pipeline</span> <span class="err">来管理应用的结构。</span>
</span><span class='line'>
</span><span class='line'><span class="err">保留</span> <span class="n">app</span><span class="o">/</span><span class="n">assets</span> <span class="err">给自定的样式表</span><span class="p">,</span> <span class="n">javascripts</span><span class="p">,</span> <span class="ow">or</span> <span class="err">图片</span><span class="o">.</span>
</span><span class='line'><span class="err">第三方代码如：</span> <span class="n">jQuery</span> <span class="err">或</span> <span class="n">bootstrap</span> <span class="err">应放置在</span> <span class="n">vendor</span><span class="o">/</span><span class="n">assets</span><span class="err">。</span>
</span><span class='line'><span class="err">当可能的时候，使用</span> <span class="n">gem</span> <span class="err">化的</span> <span class="n">assets</span> <span class="err">版本。</span><span class="p">(</span><span class="err">如：</span> <span class="n">jquery</span><span class="o">-</span><span class="n">rails</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Mailers</span>
</span><span class='line'>
</span><span class='line'><span class="err">把</span> <span class="n">mails</span> <span class="err">命名为</span> <span class="no">SomethingMailer</span><span class="err">。</span> <span class="err">没有</span> <span class="no">Mailer</span> <span class="err">字根，不能立即显现哪个是一个</span> <span class="n">mailer</span><span class="err">，以及哪个视图与它有关。</span>
</span><span class='line'><span class="err">提供</span> <span class="no">HTML</span> <span class="err">与纯文本视图模版。</span>
</span><span class='line'>
</span><span class='line'><span class="err">在你的开发环境启用信件失败发送错误。这些错误缺省是被停用的。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># config/environments/development.rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">raise_delivery_errors</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="err">在开发模式使用</span> <span class="n">smtp</span><span class="o">.</span><span class="n">gmail</span><span class="o">.</span><span class="n">com</span> <span class="err">设置</span> <span class="no">SMTP</span> <span class="err">服务器（当然了，除非你自己有本地</span> <span class="no">SMTP</span> <span class="err">服务器）。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># config/environments/development.rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">smtp_settings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">address</span><span class="p">:</span> <span class="s1">&#39;smtp.gmail.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1"># 更多设置</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">提供缺省的配置给主机名。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># config/environments/development.rb</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">default_url_options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">local_ip</span><span class="si">}</span><span class="s2">:3000&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># config/environments/production.rb</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">default_url_options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">host</span><span class="p">:</span> <span class="s1">&#39;your_site.com&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 在你的 mailer 类</span>
</span><span class='line'><span class="n">default_url_options</span><span class="o">[</span><span class="ss">:host</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;your_site.com&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">如果你需要在你的网站使用一个</span> <span class="n">email</span> <span class="err">链结，总是使用</span> <span class="n">_url</span> <span class="err">方法，而不是</span> <span class="n">_path</span> <span class="err">方法。</span> <span class="n">_url</span> <span class="err">方法包含了主机名，而</span> <span class="n">_path</span> <span class="err">方法没有。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 错误</span>
</span><span class='line'><span class="no">You</span> <span class="n">can</span> <span class="n">always</span> <span class="n">find</span> <span class="n">more</span> <span class="n">info</span> <span class="n">about</span> <span class="n">this</span> <span class="n">course</span>
</span><span class='line'><span class="o">=</span> <span class="n">link_to</span> <span class="s1">&#39;here&#39;</span><span class="p">,</span> <span class="n">url_for</span><span class="p">(</span><span class="n">course_path</span><span class="p">(</span><span class="vi">@course</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 正确</span>
</span><span class='line'><span class="no">You</span> <span class="n">can</span> <span class="n">always</span> <span class="n">find</span> <span class="n">more</span> <span class="n">info</span> <span class="n">about</span> <span class="n">this</span> <span class="n">course</span>
</span><span class='line'><span class="o">=</span> <span class="n">link_to</span> <span class="s1">&#39;here&#39;</span><span class="p">,</span> <span class="n">url_for</span><span class="p">(</span><span class="n">course_url</span><span class="p">(</span><span class="vi">@course</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="err">正确地显示寄与收件人地址的格式。使用下列格式：</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 在你的 mailer 类别</span>
</span><span class='line'><span class="n">default</span> <span class="ss">from</span><span class="p">:</span> <span class="s1">&#39;Your Name &lt;info@your_site.com&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">确定测试环境的</span> <span class="n">email</span> <span class="err">发送方法设置为</span> <span class="nb">test</span> <span class="err">：</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># config/environments/test.rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">delivery_method</span> <span class="o">=</span> <span class="ss">:test</span>
</span><span class='line'>
</span><span class='line'><span class="err">开发与生产环境的发送方法应为</span> <span class="n">smtp</span> <span class="err">：</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># config/environments/development.rb, config/environments/production.rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">delivery_method</span> <span class="o">=</span> <span class="ss">:smtp</span>
</span><span class='line'>
</span><span class='line'><span class="err">当发送</span> <span class="no">HTML</span> <span class="n">email</span> <span class="err">时，所有样式应为行内样式，由于某些用户有关于外部样式的问题。某种程度上这使得更难管理及造成代码重用。有两个相似的</span> <span class="n">gem</span> <span class="err">可以转换样式，以及将它们放在对应的</span> <span class="n">html</span> <span class="err">标签里：</span> <span class="n">premailer</span><span class="o">-</span><span class="n">rails3</span> <span class="err">和</span> <span class="n">roadie</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="err">应避免页面产生响应时寄送</span> <span class="n">email</span><span class="err">。若多个</span> <span class="n">email</span> <span class="err">寄送时，造成了页面载入延迟，以及请求可能逾时。使用</span> <span class="n">delayed_job</span> <span class="n">gem</span> <span class="err">的帮助来克服在背景处理寄送</span> <span class="n">email</span> <span class="err">的问题。</span>
</span><span class='line'>
</span><span class='line'><span class="no">Bundler</span>
</span><span class='line'>
</span><span class='line'><span class="err">把只给开发环境或测试环境的</span> <span class="n">gem</span> <span class="err">适当地分组放在</span> <span class="no">Gemfile</span> <span class="err">文件中。</span>
</span><span class='line'><span class="err">在你的项目中只使用公认的</span> <span class="n">gem</span><span class="err">。</span> <span class="err">如果你考虑引入某些显为人所知的</span> <span class="n">gem</span> <span class="err">，你应该先仔细复查一下它的源代码。</span>
</span><span class='line'>
</span><span class='line'><span class="err">关于多个开发者使用不同操作系统的项目，操作系统相关的</span> <span class="n">gem</span> <span class="err">缺省会产生一个经常变动的</span> <span class="no">Gemfile</span><span class="o">.</span><span class="n">lock</span> <span class="err">。</span> <span class="err">在</span> <span class="no">Gemfile</span> <span class="err">文件里，所有与</span> <span class="no">OS</span> <span class="n">X</span> <span class="err">相关的</span> <span class="n">gem</span> <span class="err">放在</span> <span class="n">darwin</span> <span class="err">群组，而所有</span> <span class="no">Linux</span> <span class="err">相关的</span> <span class="n">gem</span> <span class="err">放在</span> <span class="n">linux</span> <span class="err">群组：</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">group</span> <span class="ss">:darwin</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rb-fsevent&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;growl&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:linux</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rb-inotify&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">要在对的环境获得合适的</span> <span class="n">gem</span> <span class="err">，</span> <span class="err">添加以下代码至</span> <span class="n">config</span><span class="o">/</span><span class="n">application</span><span class="o">.</span><span class="n">rb</span> <span class="err">：</span>
</span><span class='line'>
</span><span class='line'><span class="n">platform</span> <span class="o">=</span> <span class="no">RUBY_PLATFORM</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/(linux|darwin)/</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_sym</span>
</span><span class='line'><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="n">platform</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">不要把</span> <span class="no">Gemfile</span><span class="o">.</span><span class="n">lock</span> <span class="err">文件从版本控制里移除。这不是随机产生的文件</span> <span class="o">-</span> <span class="err">它确保你所有的组员执行</span> <span class="n">bundle</span> <span class="n">install</span> <span class="err">时，获得相同版本的</span> <span class="n">gem</span> <span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="err">无价的</span> <span class="no">Gems</span>
</span><span class='line'>
</span><span class='line'><span class="err">一个最重要的编程理念是</span> <span class="s2">&quot;不要重造轮子！&quot;</span> <span class="err">。若你遇到一个特定问题，你应该要在你开始前，看一下是否有存在的解决方案。下面是一些在很多</span> <span class="no">Rails</span> <span class="err">项目中</span> <span class="s2">&quot;无价的&quot;</span> <span class="n">gem</span> <span class="err">列表（全部兼容</span> <span class="no">Rails</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="err">）：</span>
</span><span class='line'>
</span><span class='line'><span class="n">active_admin</span> <span class="o">-</span> <span class="err">有了</span> <span class="no">ActiveAdmin</span><span class="err">，创建</span> <span class="no">Rails</span> <span class="err">应用的管理介面就像儿戏。你会有一个很好的仪表盘，图形化</span> <span class="no">CRUD</span> <span class="err">介面以及更多东西。非常灵活且可客制。</span>
</span><span class='line'><span class="n">capybara</span> <span class="o">-</span> <span class="no">Capybara</span> <span class="err">指在简化整合测试</span> <span class="no">Rack</span> <span class="err">应用的过程，像是</span> <span class="no">Rails</span><span class="err">、</span><span class="no">Sinatra</span> <span class="err">或</span> <span class="no">Merb</span><span class="err">。</span><span class="no">Capybara</span> <span class="err">模拟了真实用户使用</span> <span class="n">web</span> <span class="err">应用的互动。</span> <span class="err">它与你测试在运行的驱动无关，并原生搭载</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Test</span> <span class="err">及</span> <span class="no">Selenium</span> <span class="err">支持。透过外部</span> <span class="n">gem</span> <span class="err">支持</span> <span class="no">HtmlUnit</span><span class="err">、</span><span class="no">WebKit</span> <span class="err">及</span> <span class="n">env</span><span class="o">.</span><span class="n">js</span> <span class="err">。与</span> <span class="no">RSpec</span> <span class="o">&amp;</span> <span class="no">Cucumber</span> <span class="err">一起使用工作良好。</span>
</span><span class='line'><span class="n">carrierwave</span> <span class="o">-</span> <span class="no">Rails</span> <span class="err">最后一个文件上传解决方案。支持上传档案（及很多其它的酷玩意儿的）的本地储存与云储存。图片后处理与</span> <span class="no">ImageMagick</span> <span class="err">整合得非常好。</span>
</span><span class='line'><span class="n">client_side_validations</span> <span class="o">-</span> <span class="err">一个美妙的</span> <span class="n">gem</span> <span class="err">，替你从现有的服务器端模型验证自动产生</span> <span class="no">Javascript</span> <span class="err">用户端验证。高度推荐！</span>
</span><span class='line'><span class="n">compass</span><span class="o">-</span><span class="n">rails</span> <span class="o">-</span> <span class="err">一个优秀的</span> <span class="n">gem</span><span class="err">，添加了某些</span> <span class="n">css</span> <span class="err">框架的支持。包括了</span> <span class="n">sass</span> <span class="n">mixin</span> <span class="err">的蒐集，让你减少</span> <span class="n">css</span> <span class="err">文件的代码并帮你解决浏览器兼容问题。</span>
</span><span class='line'><span class="n">cucumber</span><span class="o">-</span><span class="n">rails</span> <span class="o">-</span> <span class="no">Cucumber</span> <span class="err">是一个由</span> <span class="no">Ruby</span> <span class="err">所写，开发功能测试的顶级工具。</span> <span class="n">cucumber</span><span class="o">-</span><span class="n">rails</span> <span class="err">提供了</span> <span class="no">Cucumber</span> <span class="err">的</span> <span class="no">Rails</span> <span class="err">整合。</span>
</span><span class='line'><span class="n">devise</span> <span class="o">-</span> <span class="no">Devise</span> <span class="err">是</span> <span class="no">Rails</span> <span class="err">应用的一个完整解决方案。多数情况偏好使用</span> <span class="n">devise</span> <span class="err">来开始你的客制验证方案。</span>
</span><span class='line'><span class="n">fabrication</span> <span class="o">-</span> <span class="err">一个很好的假数据产生器（编辑者的选择）。</span>
</span><span class='line'><span class="n">factory_girl</span> <span class="o">-</span> <span class="err">另一个</span> <span class="n">fabrication</span> <span class="err">的选择。一个成熟的假数据产生器。</span> <span class="no">Fabrication</span> <span class="err">的精神领袖先驱。</span>
</span><span class='line'><span class="n">faker</span> <span class="o">-</span> <span class="err">实用的</span> <span class="n">gem</span> <span class="err">来产生仿造的数据（名字、地址，等等）。</span>
</span><span class='line'><span class="n">feedzirra</span> <span class="o">-</span> <span class="err">非常快速及灵活的</span> <span class="no">RSS</span><span class="o">/</span><span class="no">Atom</span> <span class="err">种子解析器。</span>
</span><span class='line'><span class="n">friendly_id</span> <span class="o">-</span> <span class="err">透过使用某些具描述性的模型属性，而不是使用</span> <span class="nb">id</span><span class="err">，允许你创建人类可读的网址。</span>
</span><span class='line'><span class="n">guard</span> <span class="o">-</span> <span class="err">极佳的</span> <span class="n">gem</span> <span class="err">监控文件变化及任务的调用。搭载了很多实用的扩充。远优于</span> <span class="n">autotest</span> <span class="err">与</span> <span class="n">watchr</span><span class="err">。</span>
</span><span class='line'><span class="n">haml</span><span class="o">-</span><span class="n">rails</span> <span class="o">-</span> <span class="n">haml</span><span class="o">-</span><span class="n">rails</span> <span class="err">提供了</span> <span class="no">Haml</span> <span class="err">的</span> <span class="no">Rails</span> <span class="err">整合。</span>
</span><span class='line'><span class="n">haml</span> <span class="o">-</span> <span class="no">Haml</span> <span class="err">是一个简洁的模型语言，被很多人认为（包括我）远优于</span> <span class="no">Erb</span><span class="err">。</span>
</span><span class='line'><span class="n">kaminari</span> <span class="o">-</span> <span class="err">很棒的分页解决方案。</span>
</span><span class='line'><span class="n">machinist</span> <span class="o">-</span> <span class="err">假数据不好玩，</span><span class="no">Machinist</span> <span class="err">才好玩。</span>
</span><span class='line'><span class="n">rspec</span><span class="o">-</span><span class="n">rails</span> <span class="o">-</span> <span class="no">RSpec</span> <span class="err">是</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:MiniTest</span> <span class="err">的取代者。我不高度推荐</span> <span class="no">RSpec</span><span class="err">。</span> <span class="n">rspec</span><span class="o">-</span><span class="n">rails</span> <span class="err">提供了</span> <span class="no">RSpec</span> <span class="err">的</span> <span class="no">Rails</span> <span class="err">整合。</span>
</span><span class='line'><span class="n">simple_form</span> <span class="o">-</span> <span class="err">一旦用过</span> <span class="n">simple_form</span><span class="err">（或</span> <span class="n">formatastic</span><span class="err">），你就不想听到关于</span> <span class="no">Rails</span> <span class="err">缺省的表单。它是一个创造表单很棒的</span><span class="no">DSL</span><span class="err">。</span>
</span><span class='line'><span class="n">simplecov</span><span class="o">-</span><span class="n">rcov</span> <span class="o">-</span> <span class="err">为了</span> <span class="no">SimpleCov</span> <span class="err">打造的</span> <span class="no">RCov</span> <span class="n">formatter</span><span class="err">。若你想使用</span> <span class="no">SimpleCov</span> <span class="err">搭配</span> <span class="no">Hudson</span> <span class="err">持续整合服务器，很有用。</span>
</span><span class='line'><span class="n">simplecov</span> <span class="o">-</span> <span class="err">代码覆盖率工具。不像</span> <span class="no">RCov</span><span class="err">，完全兼容</span> <span class="no">Ruby</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="err">。产生精美的报告。必须用！</span>
</span><span class='line'><span class="n">slim</span> <span class="o">-</span> <span class="no">Slim</span> <span class="err">是一个简洁的模版语言，被视为是远远优于</span> <span class="no">HAML</span><span class="p">(</span><span class="no">Erb</span> <span class="err">就更不用说了</span><span class="p">)</span><span class="err">的语言。唯一会阻止我大规模地使用它的是，主流</span><span class="no">IDE</span><span class="err">及编辑器的支持不好。它的效能是非凡的。</span>
</span><span class='line'><span class="n">spork</span> <span class="o">-</span> <span class="err">一个给测试框架（</span><span class="no">RSpec</span> <span class="err">或</span> <span class="err">现今</span> <span class="no">Cucumber</span><span class="err">）用的</span> <span class="no">DRb</span> <span class="err">服务器，每次运行前确保分支出一个乾净的测试状态。</span> <span class="err">简单的说，预载很多测试环境的结果是大幅降低你的测试启动时间，绝对必须用！</span>
</span><span class='line'><span class="n">sunspot</span> <span class="o">-</span> <span class="err">基于</span> <span class="no">SOLR</span> <span class="err">的全文检索引擎。</span>
</span><span class='line'>
</span><span class='line'><span class="err">这不是完整的清单，以及其它的</span> <span class="n">gem</span> <span class="err">也可以在之后加进来。以上清单上的所有</span> <span class="n">gems</span> <span class="err">皆经测试，处于活跃开发阶段，有社群以及代码的质量很高。</span>
</span><span class='line'><span class="err">缺陷的</span> <span class="no">Gems</span>
</span><span class='line'>
</span><span class='line'><span class="err">这是一个有问题的或被别的</span> <span class="n">gem</span> <span class="err">取代的</span> <span class="n">gem</span> <span class="err">清单。你应该在你的项目里避免使用它们。</span>
</span><span class='line'>
</span><span class='line'><span class="n">rmagick</span> <span class="o">-</span> <span class="err">这个</span> <span class="n">gem</span> <span class="err">因大量消耗内存而声名狼藉。使用</span> <span class="n">minimagick</span> <span class="err">来取代。</span>
</span><span class='line'><span class="n">autotest</span> <span class="o">-</span> <span class="err">自动测试的老解决方案。远不如</span> <span class="n">guard</span> <span class="err">及</span> <span class="n">watchr</span><span class="err">。</span>
</span><span class='line'><span class="n">rcov</span> <span class="o">-</span> <span class="err">代码覆盖率工具，不兼容</span> <span class="no">Ruby</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="err">。使用</span> <span class="no">SimpleCov</span> <span class="err">来取代。</span>
</span><span class='line'><span class="n">therubyracer</span> <span class="o">-</span> <span class="err">极度不鼓励在生产模式使用这个</span> <span class="n">gem</span><span class="err">，它消耗大量的内存。我会推荐使用</span> <span class="no">Mustang</span> <span class="err">来取代。</span>
</span><span class='line'>
</span><span class='line'><span class="err">这仍是一个完善中的清单。请告诉我受人欢迎但有缺陷的</span> <span class="n">gems</span> <span class="err">。</span>
</span><span class='line'><span class="err">管理进程</span>
</span><span class='line'>
</span><span class='line'><span class="err">若你的项目依赖各种外部的进程使用</span> <span class="n">foreman</span> <span class="err">来管理它们。</span>
</span><span class='line'>
</span><span class='line'><span class="err">测试</span> <span class="no">Rails</span> <span class="err">应用</span>
</span><span class='line'>
</span><span class='line'><span class="err">也许</span> <span class="no">BDD</span> <span class="err">方法是实作一个新功能最好的方法。你从开始写一些高阶的测试（通常使用</span> <span class="no">Cucumber</span><span class="err">），然后使用这些测试来驱使你实作功能。一开始你给功能的视图写测试，并使用这些测试来创建相关的视图。之后，你创建丢给视图数据的控制器测试来实现控制器。最后你实作模型的测试以及模型自身。</span>
</span><span class='line'><span class="no">Cucumber</span>
</span><span class='line'>
</span><span class='line'><span class="err">用</span> <span class="vi">@wip</span> <span class="err">（工作进行中）标签标记你未完成的场景。这些场景不纳入考虑，且不标记为测试失败。当完成一个未完成场景且功能测试通过时，为了把此场景加至测试套件里，应该移除</span> <span class="vi">@wip</span> <span class="err">标签。</span>
</span><span class='line'><span class="err">配置你的缺省配置文件，排除掉标记为</span> <span class="vi">@javascript</span> <span class="err">的场景。它们使用浏览器来测试，推荐停用它们来增加一般场景的执行速度。</span>
</span><span class='line'>
</span><span class='line'><span class="err">替标记著</span> <span class="vi">@javascript</span> <span class="err">的场景配置另一个配置文件。</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">配置文件可在</span> <span class="n">cucumber</span><span class="o">.</span><span class="n">yml</span> <span class="err">文件里配置。</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 配置文件的定义：</span>
</span><span class='line'>    <span class="n">profile_name</span><span class="p">:</span> <span class="o">--</span><span class="n">tags</span> <span class="vi">@tag_name</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">带指令运行一个配置文件：</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cucumber</span> <span class="o">-</span><span class="nb">p</span> <span class="n">profile_name</span>
</span><span class='line'>
</span><span class='line'><span class="err">若使用</span> <span class="n">fabrication</span> <span class="err">来替换假数据</span> <span class="p">(</span><span class="n">fixtures</span><span class="p">)</span><span class="err">，使用预定义的</span> <span class="n">fabrication</span> <span class="n">steps</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="err">不要使用旧版的</span> <span class="n">web_steps</span><span class="o">.</span><span class="n">rb</span> <span class="err">步骤定义！</span> <span class="err">最新版</span> <span class="no">Cucumber</span> <span class="err">已移除</span> <span class="n">web</span> <span class="n">steps</span> <span class="err">，使用它们导致冗赘的场景，而且它并没有正确地反映出应用的领域。</span>
</span><span class='line'>
</span><span class='line'><span class="err">当检查一元素的可视文字时，检查元素的文字而不是检查</span> <span class="nb">id</span><span class="err">。这样可以查出</span> <span class="n">i18n</span> <span class="err">的问题。</span>
</span><span class='line'>
</span><span class='line'><span class="err">给同种类对象创建不同的功能特色：</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 差</span>
</span><span class='line'><span class="ss">Feature</span><span class="p">:</span> <span class="no">Articles</span>
</span><span class='line'><span class="c1"># ... 特色实作 ...</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好</span>
</span><span class='line'><span class="ss">Feature</span><span class="p">:</span> <span class="no">Article</span> <span class="no">Editing</span>
</span><span class='line'><span class="c1"># ... 特色实作 ...</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Feature</span><span class="p">:</span> <span class="no">Article</span> <span class="no">Publishing</span>
</span><span class='line'><span class="c1"># ... 特色实作 ...</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Feature</span><span class="p">:</span> <span class="no">Article</span> <span class="no">Search</span>
</span><span class='line'><span class="c1"># ... 特色实作 ...</span>
</span><span class='line'>
</span><span class='line'><span class="err">每一个特色有三个主要成分：</span>
</span><span class='line'>    <span class="no">Title</span>
</span><span class='line'>    <span class="no">Narrative</span> <span class="o">-</span> <span class="err">简短说明这个特色关于什么。</span>
</span><span class='line'>    <span class="no">Acceptance</span> <span class="n">criteria</span> <span class="o">-</span> <span class="err">每个由独立步骤组成的一套场景。</span>
</span><span class='line'>
</span><span class='line'><span class="err">最常见的格式称为</span> <span class="no">Connextra</span> <span class="err">格式。</span>
</span><span class='line'>
</span><span class='line'><span class="no">In</span> <span class="n">order</span> <span class="n">to</span> <span class="o">[</span><span class="n">benefit</span><span class="o">]</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">A</span> <span class="o">[</span><span class="n">stakeholder</span><span class="o">].</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Wants</span> <span class="n">to</span> <span class="o">[</span><span class="n">feature</span><span class="o">]</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="err">这是最常见但不是要求的格式，叙述可以是依赖功能复杂度的任何文字。</span>
</span><span class='line'>
</span><span class='line'><span class="err">自由地使用场景概述使你的场景备作它用</span> <span class="p">(</span><span class="n">keep</span> <span class="n">your</span> <span class="n">scenarios</span> <span class="no">DRY</span><span class="p">)</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="no">Scenario</span> <span class="ss">Outline</span><span class="p">:</span> <span class="no">User</span> <span class="n">cannot</span> <span class="n">register</span> <span class="n">with</span> <span class="n">invalid</span> <span class="n">e</span><span class="o">-</span><span class="n">mail</span>
</span><span class='line'>  <span class="no">When</span> <span class="n">I</span> <span class="n">try</span> <span class="n">to</span> <span class="n">register</span> <span class="n">with</span> <span class="n">an</span> <span class="n">email</span> <span class="s2">&quot;&lt;email&gt;&quot;</span>
</span><span class='line'>  <span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="n">the</span> <span class="n">error</span> <span class="n">message</span> <span class="s2">&quot;&lt;error&gt;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Examples</span><span class="p">:</span>
</span><span class='line'>  <span class="o">|</span><span class="n">email</span>         <span class="o">|</span><span class="n">error</span>                 <span class="o">|</span>
</span><span class='line'>  <span class="o">|</span>              <span class="o">|</span><span class="no">The</span> <span class="n">e</span><span class="o">-</span><span class="n">mail</span> <span class="n">is</span> <span class="n">required</span><span class="o">|</span>
</span><span class='line'>  <span class="o">|</span><span class="n">invalid</span> <span class="n">email</span> <span class="o">|</span><span class="n">is</span> <span class="ow">not</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">e</span><span class="o">-</span><span class="n">mail</span> <span class="o">|</span>
</span><span class='line'>
</span><span class='line'><span class="err">场景的步骤放在</span> <span class="n">step_definitions</span> <span class="err">目录下的</span> <span class="o">.</span><span class="n">rb</span> <span class="err">文件。步骤文件命名惯例为</span> <span class="o">[</span><span class="n">description</span><span class="o">]</span><span class="n">_steps</span><span class="o">.</span><span class="n">rb</span><span class="err">。步骤根据不同的标准放在不同的文件里。每一个功能可能有一个步骤文件</span> <span class="p">(</span><span class="n">home_page_steps</span><span class="o">.</span><span class="n">rb</span><span class="p">)</span>
</span><span class='line'><span class="err">。也可能给每个特定对象的功能，建一个步骤文件</span> <span class="p">(</span><span class="n">articles_steps</span><span class="o">.</span><span class="n">rb</span><span class="p">)</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="err">使用多行步骤参数来避免重复</span>
</span><span class='line'>
</span><span class='line'><span class="err">场景</span><span class="p">:</span> <span class="no">User</span> <span class="n">profile</span>
</span><span class='line'>  <span class="no">Given</span> <span class="n">I</span> <span class="n">am</span> <span class="n">logged</span> <span class="k">in</span> <span class="n">as</span> <span class="n">a</span> <span class="n">user</span> <span class="s2">&quot;John Doe&quot;</span> <span class="n">with</span> <span class="n">an</span> <span class="n">e</span><span class="o">-</span><span class="n">mail</span> <span class="s2">&quot;user@test.com&quot;</span>
</span><span class='line'>  <span class="no">When</span> <span class="n">I</span> <span class="n">go</span> <span class="n">to</span> <span class="n">my</span> <span class="n">profile</span>
</span><span class='line'>  <span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="n">the</span> <span class="n">following</span> <span class="ss">information</span><span class="p">:</span>
</span><span class='line'>    <span class="o">|</span><span class="no">First</span> <span class="nb">name</span><span class="o">|</span><span class="no">John</span>         <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span><span class="no">Last</span> <span class="nb">name</span> <span class="o">|</span><span class="no">Doe</span>          <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span><span class="n">E</span><span class="o">-</span><span class="n">mail</span>    <span class="o">|</span><span class="n">user</span><span class="vi">@test</span><span class="o">.</span><span class="n">com</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 步骤:</span>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^I should see the following information:$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
</span><span class='line'>  <span class="n">table</span><span class="o">.</span><span class="n">raw</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">field</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>    <span class="n">find_field</span><span class="p">(</span><span class="n">field</span><span class="p">)</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">should</span> <span class="o">=~</span> <span class="sr">/</span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="sr">/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">使用复合步骤使场景备作它用</span> <span class="p">(</span><span class="no">Keep</span> <span class="n">your</span> <span class="n">scenarios</span> <span class="no">DRY</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="no">When</span> <span class="n">I</span> <span class="n">subscribe</span> <span class="k">for</span> <span class="n">news</span> <span class="n">from</span> <span class="n">the</span> <span class="n">category</span> <span class="s2">&quot;Technical News&quot;</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># the step:</span>
</span><span class='line'><span class="no">When</span> <span class="sr">/^I subscribe for news from the category &quot;([^&quot;]*)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class='line'>  <span class="n">steps</span> <span class="sx">%Q{</span>
</span><span class='line'><span class="sx">    When I go to the news categories page</span>
</span><span class='line'><span class="sx">    And I select the category </span><span class="si">#{</span><span class="n">category</span><span class="si">}</span><span class="sx"></span>
</span><span class='line'><span class="sx">    And I click the button &quot;Subscribe for this category&quot;</span>
</span><span class='line'><span class="sx">    And I confirm the subscription</span>
</span><span class='line'><span class="sx">  }</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">总是使用</span> <span class="no">Capybara</span> <span class="err">否定匹配来取代正面情况搭配</span> <span class="n">should_not</span><span class="err">，它们会在给定的超时时重试匹配，允许你测试</span> <span class="n">ajax</span> <span class="err">动作。</span> <span class="err">见</span> <span class="no">Capybara</span> <span class="err">的</span> <span class="err">读我文件</span> <span class="err">获得更多说明。</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span>
</span><span class='line'>
</span><span class='line'><span class="err">一个例子仅用一个期望值。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 差</span>
</span><span class='line'><span class="n">describe</span> <span class="no">ArticlesController</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;GET new&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;assigns new article and renders the new article template&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:new</span>
</span><span class='line'>      <span class="n">assigns</span><span class="o">[</span><span class="ss">:article</span><span class="o">].</span><span class="n">should</span> <span class="n">be_a_new</span> <span class="no">Article</span>
</span><span class='line'>      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_template</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好</span>
</span><span class='line'><span class="n">describe</span> <span class="no">ArticlesController</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;GET new&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;assigns a new article&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:new</span>
</span><span class='line'>      <span class="n">assigns</span><span class="o">[</span><span class="ss">:article</span><span class="o">].</span><span class="n">should</span> <span class="n">be_a_new</span> <span class="no">Article</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;renders the new article template&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:new</span>
</span><span class='line'>      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_template</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">大量使用</span> <span class="n">descibe</span> <span class="err">及</span> <span class="n">context</span> <span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="err">如下地替</span> <span class="n">describe</span> <span class="err">区块命名：</span>
</span><span class='line'>    <span class="err">非方法使用</span> <span class="s2">&quot;description&quot;</span>
</span><span class='line'>    <span class="err">实例方法使用井字号</span> <span class="s2">&quot;#method&quot;</span>
</span><span class='line'>    <span class="err">类别方法使用点</span> <span class="s2">&quot;.method&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Article</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">summary</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">latest</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># the spec...</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Article</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#summary&#39;</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;.latest&#39;</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">使用</span> <span class="n">fabricators</span> <span class="err">来创建测试对象。</span>
</span><span class='line'>
</span><span class='line'><span class="err">大量使用</span> <span class="n">mocks</span> <span class="err">与</span> <span class="n">stubs</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># mocking 一个模型</span>
</span><span class='line'><span class="n">article</span> <span class="o">=</span> <span class="n">mock_model</span><span class="p">(</span><span class="no">Article</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># stubbing a method</span>
</span><span class='line'><span class="no">Article</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:find</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">article</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">article</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">当</span> <span class="n">mocking</span> <span class="err">一个模型时，使用</span> <span class="n">as_null_object</span> <span class="err">方法。它告诉输出仅监听我们预期的讯息，并忽略其它的讯息。</span>
</span><span class='line'>
</span><span class='line'><span class="n">article</span> <span class="o">=</span> <span class="n">mock_model</span><span class="p">(</span><span class="no">Article</span><span class="p">)</span><span class="o">.</span><span class="n">as_null_object</span>
</span><span class='line'>
</span><span class='line'><span class="err">使用</span> <span class="n">let</span> <span class="err">区块而不是</span> <span class="n">before</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span> <span class="err">区块替</span> <span class="n">spec</span> <span class="err">例子创建数据。</span><span class="n">let</span> <span class="err">区块会被懒惰求值。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 使用这个：</span>
</span><span class='line'><span class="n">let</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ... 而不是这个：</span>
</span><span class='line'><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="p">{</span> <span class="vi">@article</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">当可能时，使用</span> <span class="n">subject</span> <span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Article</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;is not published on creation&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_published</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">如果可能的话，使用</span> <span class="n">specify</span> <span class="err">。它是</span> <span class="n">it</span> <span class="err">的同义词，但在没</span> <span class="n">docstring</span> <span class="err">的情况下可读性更高。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 差</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Article</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span> <span class="p">{</span> <span class="vi">@article</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;is not published on creation&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@article</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_published</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Article</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">specify</span> <span class="p">{</span> <span class="n">article</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_published</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">当可能时，使用</span> <span class="n">its</span> <span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 差</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Article</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;has the current date as creation date&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="n">creation_date</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 好</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Article</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="ss">:creation_date</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">视图</span>
</span><span class='line'>
</span><span class='line'><span class="err">视图测试的目录结构要与</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span> <span class="err">之中的相符。</span> <span class="err">举例来说，在</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">users</span> <span class="err">视图被放在</span> <span class="n">spec</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">users</span><span class="err">。</span>
</span><span class='line'><span class="err">视图测试的命名惯例是添加</span> <span class="n">_spec</span><span class="o">.</span><span class="n">rb</span> <span class="err">至视图名字之后，举例来说，视图</span> <span class="n">_form</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">haml</span> <span class="err">有一个对应的测试叫做</span> <span class="n">_form</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">haml_spec</span><span class="o">.</span><span class="n">rb</span> <span class="err">。</span>
</span><span class='line'><span class="err">每个视图测试文件都需要</span> <span class="n">spec_helper</span><span class="o">.</span><span class="n">rb</span> <span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="err">外部描述区块使用不含</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span> <span class="err">部分的视图路径。</span> <span class="n">render</span> <span class="err">方法没有传入参数时，是这么使用的。</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<pre><code># spec/views/articles/new.html.haml_spec.rb
require 'spec_helper'

describe 'articles/new.html.haml' do
  # ...
end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">永远在视图测试来</span> <span class="n">mock</span> <span class="err">模型。视图的目的只是显示信息。</span>
</span><span class='line'>
</span><span class='line'><span class="n">assign</span> <span class="err">方法提供由控制器提供视图使用的实例变数。</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<pre><code># spec/views/articles/edit.html.haml_spec.rb
describe 'articles/edit.html.haml' do
it 'renders the form for a new article creation' do
  assign(
    :article,
    mock_model(Article).as_new_record.as_null_object
  )
  render
  rendered.should have_selector('form',
    method: 'post',
    action: articles_path
  ) do |form|
    form.should have_selector('input', type: 'submit')
  end
end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">偏好</span> <span class="n">capybara</span> <span class="err">否定情况选择器，胜于搭配正面情况的</span> <span class="n">should_not</span> <span class="err">。</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<pre><code># 差
page.should_not have_selector('input', type: 'submit')
page.should_not have_xpath('tr')

# 好
page.should have_no_selector('input', type: 'submit')
page.should have_no_xpath('tr')
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">当一个视图使用</span> <span class="n">helper</span> <span class="err">方法时，这些方法需要被</span> <span class="n">stubbed</span><span class="err">。</span><span class="no">Stubbing</span> <span class="err">这些</span> <span class="n">helper</span> <span class="err">方法是在</span> <span class="n">template</span> <span class="err">完成的：</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<pre><code># app/helpers/articles_helper.rb
class ArticlesHelper
  def formatted_date(date)
    # ...
  end
end

# app/views/articles/show.html.haml
= "Published at: #{formatted_date(@article.published_at)}"

# spec/views/articles/show.html.haml_spec.rb
describe 'articles/show.html.html' do
  it 'displays the formatted date of article publishing'
    article = mock_model(Article, published_at: Date.new(2012, 01, 01))
    assign(:article, article)

    template.stub(:formatted_date).with(article.published_at).and_return '01.01.2012'

    render
    rendered.should have_content('Published at: 01.01.2012')
  end
end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">在</span> <span class="n">spec</span><span class="o">/</span><span class="n">helpers</span> <span class="err">目录的</span> <span class="n">helper</span> <span class="n">specs</span> <span class="err">是与视图</span> <span class="n">specs</span> <span class="err">分开的。</span>
</span><span class='line'>
</span><span class='line'><span class="err">控制器</span>
</span><span class='line'>
</span><span class='line'><span class="no">Mock</span> <span class="err">模型及</span> <span class="n">stub</span> <span class="err">他们的方法。测试控制器时不应依赖建模。</span>
</span><span class='line'>
</span><span class='line'><span class="err">仅测试控制器需负责的行为：</span>
</span><span class='line'>    <span class="err">执行特定的方法</span>
</span><span class='line'>    <span class="err">从动作返回的数据</span> <span class="o">-</span> <span class="n">assigns</span><span class="p">,</span> <span class="err">等等。</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">从动作返回的结果</span> <span class="o">-</span> <span class="n">template</span> <span class="n">render</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span> <span class="err">等等。</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<pre><code>    # 常用的控制器 spec 示例
    # spec/controllers/articles_controller_spec.rb
    # 我们只对控制器应执行的动作感兴趣
    # 所以我们 mock 模型及 stub 它的方法
    # 并且专注在控制器该做的事情上

    describe ArticlesController do
      # The model will be used in the specs for all methods of the controller
      let(:article) { mock_model(Article) }

      describe 'POST create' do
        before { Article.stub(:new).and_return(article) }

        it 'creates a new article with the given attributes' do
          Article.should_receive(:new).with(title: 'The New Article Title').and_return(article)
          post :create, message: { title: 'The New Article Title' }
        end

        it 'saves the article' do
          article.should_receive(:save)
          post :create
        end

        it 'redirects to the Articles index' do
          article.stub(:save)
          post :create
          response.should redirect_to(action: 'index')
        end
      end
    end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">当控制器根据不同参数有不同行为时，使用</span> <span class="n">context</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 一个在控制器中使用 context 的典型例子是，对象正确保存时，使用创建，保存失败时更新。</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<pre><code>describe ArticlesController do
  let(:article) { mock_model(Article) }

  describe 'POST create' do
    before { Article.stub(:new).and_return(article) }

    it 'creates a new article with the given attributes' do
      Article.should_receive(:new).with(title: 'The New Article Title').and_return(article)
      post :create, article: { title: 'The New Article Title' }
    end

    it 'saves the article' do
      article.should_receive(:save)
      post :create
    end

    context 'when the article saves successfully' do
      before { article.stub(:save).and_return(true) }

      it 'sets a flash[:notice] message' do
        post :create
        flash[:notice].should eq('The article was saved successfully.')
      end

      it 'redirects to the Articles index' do
        post :create
        response.should redirect_to(action: 'index')
      end
    end

    context 'when the article fails to save' do
      before { article.stub(:save).and_return(false) }

      it 'assigns @article' do
        post :create
        assigns[:article].should be_eql(article)
      end

      it 're-renders the "new" template' do
        post :create
        response.should render_template('new')
      end
    end
  end
end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">模型</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">不要在自己的测试里</span> <span class="n">mock</span> <span class="err">模型。</span>
</span><span class='line'>    <span class="err">使用捏造的东西来创建真的对象</span>
</span><span class='line'>    <span class="no">Mock</span> <span class="err">别的模型或子对象是可接受的。</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">在测试里建立所有例子的模型来避免重复。</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<pre><code>describe Article
  let(:article) { Fabricate(:article) }
end

加入一个例子确保捏造的模型是可行的。 Add an example ensuring that the fabricated model is valid.

describe Article
  it 'is valid with valid attributes' do
    article.should be_valid
  end
end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">当测试验证时，使用</span> <span class="n">have</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">errors_on</span> <span class="err">来指定要被验证的属性。使用</span> <span class="n">be_valid</span> <span class="err">不保证问题在目的的属性。</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<pre><code># 差
describe '#title'
  it 'is required' do
    article.title = nil
    article.should_not be_valid
  end
end

# 偏好
describe '#title'
  it 'is required' do
    article.title = nil
    article.should have(1).error_on(:title)
  end
end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">替每个有验证的属性加另一个</span> <span class="n">describe</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Article</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#title&#39;</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;is required&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">article</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">article</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">error_on</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">当测试模型属性的独立性时，把其它对象命名为</span> <span class="n">another_object</span><span class="err">。</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<pre><code>describe Article
  describe '#title'
    it 'is unique' do
      another_article = Fabricate.build(:article, title: article.title)
      article.should have(1).error_on(:title)
    end
  end
end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Mailers</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">在</span> <span class="n">mailer</span> <span class="err">测试的模型应该要被</span> <span class="n">mock</span><span class="err">。</span> <span class="n">mailer</span> <span class="err">不应依赖建模。</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mailer</span> <span class="err">的测试应该确认如下：</span>
</span><span class='line'>        <span class="err">这个</span> <span class="n">subject</span> <span class="err">是正确的</span>
</span><span class='line'>        <span class="err">这个</span> <span class="n">receiver</span> <span class="n">e</span><span class="o">-</span><span class="n">mail</span> <span class="err">是正确的</span>
</span><span class='line'>        <span class="err">这个</span> <span class="n">e</span><span class="o">-</span><span class="n">mail</span> <span class="err">寄送至对的邮件地址</span>
</span><span class='line'>        <span class="err">这个</span> <span class="n">e</span><span class="o">-</span><span class="n">mail</span> <span class="err">包含了需要的信息</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<pre><code> describe SubscriberMailer
   let(:subscriber) { mock_model(Subscription, email: 'johndoe@test.com', name: 'John Doe') }

   describe 'successful registration email'
     subject { SubscriptionMailer.successful_registration_email(subscriber) }

     its(:subject) { should == 'Successful Registration!' }
     its(:from) { should == ['info@your_site.com'] }
     its(:to) { should == [subscriber.email] }

     it 'contains the subscriber name' do
       subject.body.encoded.should match(subscriber.name)
     end
   end
 end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Uploaders</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">我们如何测试上传器是否正确地调整大小。这里是一个</span> <span class="n">carrierwave</span> <span class="err">图片上传器的示例</span> <span class="n">spec</span><span class="err">：</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<pre><code># rspec/uploaders/person_avatar_uploader_spec.rb
require 'spec_helper'
require 'carrierwave/test/matchers'

describe PersonAvatarUploader do
  include CarrierWave::Test::Matchers

  # 在执行例子前启用图片处理
  before(:all) do
    UserAvatarUploader.enable_processing = true
  end

  # 创建一个新的 uploader。模型被模仿为不依赖建模时的上传及调整图片。
  before(:each) do
    @uploader = PersonAvatarUploader.new(mock_model(Person).as_null_object)
    @uploader.store!(File.open(path_to_file))
  end

  # 执行完例子时停用图片处理
  after(:all) do
    UserAvatarUploader.enable_processing = false
  end

  # 测试图片是否不比给定的维度长
  context 'the default version' do
    it 'scales down an image to be no larger than 256 by 256 pixels' do
      @uploader.should be_no_larger_than(256, 256)
    end
  end

  # 测试图片是否有确切的维度
  context 'the thumb version' do
    it 'scales down an image to be exactly 64 by 64 pixels' do
      @uploader.thumb.should have_dimensions(64, 64)
    end
  end
end
```
原文转自： http://www.cnblogs.com/hedgehog-ZDH/archive/2012/11/16/2773749.html
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nokogiri抓取失败后重试代码]]></title>
    <link href="http://tianshuai.github.io/blog/2013/03/28/nokogirizhua-qu-shi-bai-hou-zhong-shi-dai-ma/"/>
    <updated>2013-03-28T13:58:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/03/28/nokogirizhua-qu-shi-bai-hou-zhong-shi-dai-ma</id>
    <content type="html"><![CDATA[<p>非常喜欢Nokogiri的简洁，尤其是根据css和xpath查找元素。有时又觉得Nokogiri太简洁了，连抓取失败重试的机制都没有。可惜在景德镇，网络经常丢包，真是郁闷。
所以写这段代码，以后肯定常用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">doc</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">strip</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="n">error</span> <span class="s2">&quot;Error: </span><span class="si">#{</span><span class="n">ex</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">retry</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tips: retry可以跳回begin
这段代码将打印log并一直重试直到成功。估计这样写不大合适，因为一旦发生一个小错误，将会导致死循环。比较好的做法是，循环10次，如果都失败就放弃。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#定义常量，最多循环10次</span>
</span><span class='line'><span class="no">MAX_ATTEMPTS</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">doc</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">strip</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="n">error</span> <span class="s2">&quot;Error: </span><span class="si">#{</span><span class="n">ex</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">attempts</span> <span class="o">=</span> <span class="n">attempts</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">retry</span> <span class="k">if</span><span class="p">(</span><span class="n">attempts</span> <span class="o">&lt;</span> <span class="no">MAX_ATTEMPTS</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">doc</span><span class="o">.</span><span class="n">nil?</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 尝试10次后都失败，在这里处理一下。</span>
</span><span class='line'>  <span class="c1"># 以免后面处理doc时抛空指针异常</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>原文链接：<a href="http://rubyer.me/blog/537/">http://rubyer.me/blog/537/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim操作技巧]]></title>
    <link href="http://tianshuai.github.io/blog/2013/02/19/vimcao-zuo-ji-qiao/"/>
    <updated>2013-02-19T20:22:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/02/19/vimcao-zuo-ji-qiao</id>
    <content type="html"><![CDATA[<!--more-->


<h3>Vim的NERDTree快捷键</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*    切换工作台和目录
</span><span class='line'>ctr+w+h  光标focus左侧树形目录，ctrl+w+l 光标focus右侧文件显示窗口。 
</span><span class='line'>ctrl+w+w，光标自动在左右侧窗口切换 
</span><span class='line'>111   o.......在已有窗口中打开文件、目录
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个或书签，并跳到该窗口   .....|NERDTree-o|  
</span><span class='line'>
</span><span class='line'>112   go......在已有窗口 中打开文件、目录或书签，但不跳到该窗口 .....|NERDTree-go| 
</span><span class='line'>113   t....... 在新Tab中打开选中文件/书签，并跳到新Tab          .....|NERDTree-t|  
</span><span class='line'>114   T.......在新Tab中打开选中文件/书签，但不跳到新Tab        .....|NERDTree-T|  
</span><span class='line'>115   i.......split 一个新窗口打开选中文件，并跳到该窗口        .....|NERDTree-i|  
</span><span class='line'>116   gi......split一个新窗口打开选中文件，但不跳到该窗口      .....|NERDTree-gi| 
</span><span class='line'>117   s.......vsp一个新窗口打开选中文件，并跳到该窗口          .....|NERDTree-s|  
</span><span class='line'>118   gs......vsp一个新 窗口打开选中文件，但不跳到该窗口        .....|NERDTree-gs| 
</span><span class='line'>119   !.......执行当前文件                                     .....|NERDTree-!|  
</span><span class='line'>120   O.......递归打开选中 结点下的所有目录                     .....|NERDTree-O|  
</span><span class='line'>121   x.......合拢选中结点的父目录                             .....|NERDTree-x|  
</span><span class='line'>122   X.......递归 合拢选中结点下的所有目录                     .....|NERDTree-X|  
</span><span class='line'>123   e.......Edit the current dif                             .....|NERDTree-e|  
</span><span class='line'>124 
</span><span class='line'>125   双击......相当于NERDTree-o
</span><span class='line'>126   中键......对文件相当于NERDTree-i，对目录相当于NERDTree-e
</span><span class='line'>127 
</span><span class='line'>128   D....... 删除当前书签
</span><span class='line'>129           
</span><span class='line'>130   P.......跳到根结点
</span><span class='line'>131   p....... 跳到父结点
</span><span class='line'>132   K.......跳到当前目录下同级的第一个结点
</span><span class='line'>133   J.......跳到当前目录下同级的最后一个结点
</span><span class='line'>134   ...跳到当前目录下同级的前一个结点
</span><span class='line'>135   ...跳到当前目录下同级的后一个结点
</span><span class='line'>136           
</span><span class='line'>137   C.......将选中目录或选中文件的父目录设为根结点
</span><span class='line'>138   u.......将当前根结点的父目录设为根目录，并变成合拢原根结点
</span><span class='line'>139   U.......将当前根结点的父目录设为根目录，但保持展开原根结点
</span><span class='line'>140   r.......递归刷新选中目录
</span><span class='line'>141   R.......递归刷新根结点
</span><span class='line'>142   m....... 显示文件系统菜单
</span><span class='line'>143   cd......将CWD设为选中目录
</span><span class='line'>144           
</span><span class='line'>145   I....... 切换是否显示隐藏文件
</span><span class='line'>146   f.......切换是否使用文件过滤器
</span><span class='line'>147   F.......切换是否显示文件
</span><span class='line'>148   B.......切换是否显示书签
</span><span class='line'>149           
</span><span class='line'>150   q.......关闭NerdTree窗口
</span><span class='line'>151   ?.......切换是否显示Quick Help
</span></code></pre></td></tr></table></div></figure>


<h3>VIM的tab切换</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:tabnew [++opt选项] ［＋cmd］ 文件            建立对指定文件新的tab
</span><span class='line'>:tabc       关闭当前的tab
</span><span class='line'>:tabo       关闭所有其他的tab
</span><span class='line'>:tabs       查看所有打开的tab
</span><span class='line'>:tabp      前一个
</span><span class='line'>:tabn      后一个
</span><span class='line'>标准模式下：
</span><span class='line'>gt , gT 可以直接在tab之间切换。</span></code></pre></td></tr></table></div></figure>


<h3>vim 替换操作大全</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>* vi/vim 中可以使用 :s 命令来替换字符串。以前只会使用一种格式来全文替换，今天发现该命令有很多种写法（vi 真是强大啊，还有很多需要学习），记录几种在此，方便以后查询。
</span><span class='line'>:s/vivian/sky/ 替换当前行第一个 vivian 为 sky
</span><span class='line'>:s/vivian/sky/g 替换当前行所有 vivian 为 sky
</span><span class='line'>:n,$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky
</span><span class='line'>:2,$s/vivian/sky/g 替换第 2 行开始到最后一行中每一行所有 vivian 为 sky
</span><span class='line'>n 为数字，若 n 为 .，表示从当前行开始到最后一行
</span><span class='line'>:%s/vivian/sky/（等同于 :g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sky
</span><span class='line'>:%s/vivian/sky/g（等同于 :g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky
</span><span class='line'>可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符
</span><span class='line'>:s#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/
</span><span class='line'>:%s+/oradata/apras/+/user01/apras1+ （使用+ 来 替换 / ）： /oradata/apras/替换成/user01/apras1/
</span><span class='line'>1.:s/vivian/sky/ 替换当前行第一个 vivian 为 sky
</span><span class='line'>:s/vivian/sky/g 替换当前行所有 vivian 为 sky
</span><span class='line'>2. :n,$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky
</span><span class='line'>:n,$s/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky
</span><span class='line'>(n 为数字，若 n 为 .，表示从当前行开始到最后一行)
</span><span class='line'>3. :%s/vivian/sky/（等同于 :g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sky
</span><span class='line'>:%s/vivian/sky/g（等同于 :g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky
</span><span class='line'>4. 可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符
</span><span class='line'>:s#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/
</span><span class='line'>5. 删除文本中的^M
</span><span class='line'>问题描述：对于换行,window下用回车换行(0A0D)来表示，Linux下是回车(0A)来表示。这样，将window上的文件拷到Unix上用时，总会有个^M.请写个用在unix下的过滤windows文件的换行符(0D)的shell或c程序。
</span><span class='line'>· 使用命令：cat filename1 | tr -d "^V^M" &gt; newfile；
</span><span class='line'>· 使用命令：sed -e "s/^V^M//" filename &gt; outputfilename。需要注意的是在1、2两种方法中，^V和^M指的是Ctrl+V和Ctrl+M。你必须要手工进行输入，而不是粘贴。
</span><span class='line'>· 在vi中处理：首先使用vi打开文件，然后按ESC键，接着输入命令：%s/^V^M//。
</span><span class='line'>· :%s/^M$//g
</span><span class='line'>如果上述方法无用，则正确的解决办法是：
</span><span class='line'>· tr -d "\r" &lt; src &gt;dest
</span><span class='line'>· tr -d "\015" dest
</span><span class='line'>· strings A&gt;B
</span><span class='line'>
</span><span class='line'>6. 其它
</span><span class='line'>利用 :s 命令可以实现字符串的替换。具体的用法包括：
</span><span class='line'>:s/str1/str2/ 用字符串 str2 替换行中首次出现的字符串 str1
</span><span class='line'>:s/str1/str2/g 用字符串 str2 替换行中所有出现的字符串 str1
</span><span class='line'>:.,$ s/str1/str2/g 用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1
</span><span class='line'>:1,$ s/str1/str2/g 用字符串 str2 替换正文中所有出现的字符串 str1
</span><span class='line'>:g/str1/s//str2/g 功能同上
</span><span class='line'>从上述替换命令可以看到：g 放在命令末尾，表示对搜索字符串的每次出现进行替换；不加 g，表示只对搜索
</span><span class='line'>字符串的首次出现进行替换；g 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作。
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A great starting point]]></title>
    <link href="http://tianshuai.github.io/blog/2013/02/19/a-great-starting-point/"/>
    <updated>2013-02-19T18:33:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/02/19/a-great-starting-point</id>
    <content type="html"><![CDATA[<p>我的IT字典！</p>
]]></content>
  </entry>
  
</feed>
