<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | TianShuai &prime;s Blog]]></title>
  <link href="http://tianshuai.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://tianshuai.github.io/"/>
  <updated>2013-08-30T20:51:07+08:00</updated>
  <id>http://tianshuai.github.io/</id>
  <author>
    <name><![CDATA[TianShuai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby之面向对象]]></title>
    <link href="http://tianshuai.github.io/blog/2013/08/30/rubyzhi-mian-xiang-dui-xiang/"/>
    <updated>2013-08-30T17:05:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/08/30/rubyzhi-mian-xiang-dui-xiang</id>
    <content type="html"><![CDATA[<h4>面向对象的三个基本特征是：封装、继承、多态。</h4>

<p style="text-align:center;"> <img src="/images/ruby/o_OOBase.gif" alt="o_OOBase.gif" /></p>

<h4>封装</h4>

<ul>
<li>封装最好理解了。封装是面向对象的特征之一，是对象和类概念的主要特性。</li>
<li>封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</li>
</ul>


<h4>继承</h4>

<ul>
<li>面向对象编程 (OOP) 语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。</li>
<li>通过继承创建的新类称为“子类”或“派生类”。</li>
<li>被继承的类称为“基类”、“父类”或“超类”。</li>
<li>继承的过程，就是从一般到特殊的过程。</li>
<li>要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。</li>
<li><p>在某些 OOP 语言中，一个子类可以继承多个基类。但是一般情况下，一个子类只能有一个基类，要实现多重继承，可以通过多级继承来实现。</p></li>
<li><p>继承概念的实现方式有三类：实现继承、接口继承和可视继承。<br/>
Ø  实现继承是指使用基类的属性和方法而无需额外编码的能力；<br/>
Ø  接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；<br/>
Ø  可视继承是指子窗体（类）使用基窗体（类）的外观和实现代码的能力。</p></li>
<li>在考虑使用继承时，有一点需要注意，那就是两个类之间的关系应该是“属于”关系。例如，Employee 是一个人，Manager 也是一个人，因此这两个类都可以继承 Person 类。但是 Leg 类却不能继承 Person 类，因为腿并不是一个人。</li>
<li>抽象类仅定义将由子类创建的一般属性和方法，创建抽象类时，请使用关键字 Interface 而不是 Class。</li>
<li>OO开发范式大致为：划分对象→抽象类→将类组织成为层次化结构(继承和合成) →用类与实例进行设计和实现几个阶段。</li>
</ul>


<h4>多态</h4>

<ul>
<li>多态性（polymorphisn）是允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。</li>
<li>实现多态，有二种方式，覆盖，重载。</li>
<li>覆盖，是指子类重新定义父类的虚函数的做法。</li>
<li>重载，是指允许存在多个同名函数，而这些函数的参数表不同（或许参数个数不同，或许参数类型不同，或许两者都不同）。</li>
</ul>


<p>&emsp;&emsp;其实，重载的概念并不属于“面向对象编程”，重载的实现是：编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就成了不同的函数（至少对于编译器来说是这样的）。如，有两个同名函数：function func(p:integer):integer;和function func(p:string):integer;。那么编译器做过修饰后的函数名称可能是这样的：int_func、str_func。对于这两个函数的调用，在编译器间就已经确定了，是静态的（记住：是静态）。也就是说，它们的地址在编译期就绑定了（早绑定），因此，重载和多态无关！真正和多态相关的是“覆盖”。当子类重新定义了父类的虚函数后，父类指针根据赋给它的不同的子类指针，动态（记住：是动态！）的调用属于子类的该函数，这样的函数调用在编译期间是无法确定的（调用的子类的虚函数的地址无法给出）。因此，这样的函数地址是在运行期绑定的（晚邦定）。结论就是：重载只是一种语言特性，与多态无关，与面向对象也无关！引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚邦定，它就不是多态。”</p>

<p>&emsp;&emsp;那么，多态的作用是什么呢？我们知道，封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）；它们的目的都是为了——代码重用。而多态则是为了实现另一个目的——接口重用！多态的作用，就是为了类在继承和派生的时候，保证使用“家谱”中任一类的实例的某一属性时的正确调用。
其实，重载的概念并不属于“面向对象编程”，重载的实现是：编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就成了不同的函数（至少对于编译器来说是这样的）。如，有两个同名函数：function func(p:integer):integer;和function func(p:string):integer;。那么编译器做过修饰后的函数名称可能是这样的：int_func、str_func。对于这两个函数的调用，在编译器间就已经确定了，是静态的（记住：是静态）。也就是说，它们的地址在编译期就绑定了（早绑定），因此，重载和多态无关！真正和多态相关的是“覆盖”。当子类重新定义了父类的虚函数后，父类指针根据赋给它的不同的子类指针，动态（记住：是动态！）的调用属于子类的该函数，这样的函数调用在编译期间是无法确定的（调用的子类的虚函数的地址无法给出）。因此，这样的函数地址是在运行期绑定的（晚邦定）。结论就是：重载只是一种语言特性，与多态无关，与面向对象也无关！引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚邦定，它就不是多态。”
那么，多态的作用是什么呢？我们知道，封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）；它们的目的都是为了——代码重用。而多态则是为了实现另一个目的——接口重用！多态的作用，就是为了类在继承和派生的时候，保证使用“家谱”中任一类的实例的某一属性时的正确调用。</p>

<p><a href="http://www.cnitblog.com/Lily/archive/2013/01/03/6860.html">转自</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 进阶]]></title>
    <link href="http://tianshuai.github.io/blog/2013/03/28/ruby-jin-jie/"/>
    <updated>2013-03-28T14:48:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/03/28/ruby-jin-jie</id>
    <content type="html"><![CDATA[<p>1.下载网页中图片
```ruby
require &lsquo;net/http&rsquo;
Net::HTTP.start(&ldquo;www.google.com.hk&rdquo;) { |http|
  resp = http.get(&ldquo;/images/srpr/nav_logo27.png&rdquo;)
  open(&ldquo;D:/test.png&rdquo;, &ldquo;wb&rdquo;) { |file|</p>

<pre><code>file.write(resp.body)
</code></pre>

<p>   }
}
puts &ldquo;OK&rdquo;
```</p>

<!--more-->


<p>2.Nokogiri 中文乱码解决技巧
Nokogiri在抓取网页操作性和速度方面的确非常棒，但中文乱码一直让很多人头痛，老宋最近在写一个抓取器的时候做了一个总结，汇总成6条提示，如果你也遇到乱码问题，不妨试一下:)</p>

<p>提示1：在文件头指定程序编码
在***.rb头上添加,注意：一定要在第一行，中间添加无效</p>

<p>```ruby</p>

<h1>coding: utf-8</h1>

<p>提示2:url有中文要进行urlencode编码</p>

<p>url=URI.escape(&ldquo;<a href="http://g.cn?q=%E4%B8%AD%E5%9B%BD">http://g.cn?q=%E4%B8%AD%E5%9B%BD</a>&rdquo;)
提示3：显式设置要抓取目标的编码</p>

<p>doc = Nokogiri::HTML.parse(open(&ldquo;<a href="http://rubyer.me/">http://rubyer.me/</a>&rdquo;), nil, &ldquo;UTF-8&rdquo;)
提示4: 使用Iconv.iconv(to_encoding,from_encoding,str_to_conv)手动转换编码</p>

<p>puts Iconv.iconv(&ldquo;UTF-8&rdquo;, &ldquo;GBK&rdquo;, doc)
提示5: 如果不确定目标是什么编码，Ruby1.9开始可以用String类内置的encoding来得到编码。</p>

<p>puts Iconv.iconv(&ldquo;UTF-8&rdquo;, doc.to_s.encoding.to_s, doc)
提示6: 使用//IGNORE忽略无法转换的字符</p>

<p>Iconv.iconv(&ldquo;UTF-8//IGNORE&rdquo;, &ldquo;GBK//IGNORE&rdquo;, doc)
```</p>

<p>法一、结合meta_encoding和Iconv
```ruby</p>

<h1>coding: utf-8</h1>

<p>require &lsquo;open-uri&rsquo;
require &lsquo;nokogiri&rsquo;
require &lsquo;iconv&rsquo;</p>

<h1>这个url是百度一个快照的地址，直接拿来做例子。</h1>

<p>url = &ldquo;<a href="http://cache.baidu.com/c?m=9f65cb4a8c8507ed4fece763105690365203c0743ca08f426284cd15c6790a120131b6e667690d44809e222615ea141cbcff&amp;p=817bc45b87934eac5fa8c7710a0d&amp;user=baidu&amp;fm=sc&amp;query=site%3Arubyer%2Eme&amp;qid=b351e91d4dc50477&amp;p1=2">http://cache.baidu.com/c?m=9f65cb4a8c8507ed4fece763105690365203c0743ca08f426284cd15c6790a120131b6e667690d44809e222615ea141cbcff&amp;p=817bc45b87934eac5fa8c7710a0d&amp;user=baidu&amp;fm=sc&amp;query=site%3Arubyer%2Eme&amp;qid=b351e91d4dc50477&amp;p1=2</a>&rdquo;</p>

<p>response = open(url).read
response = Nokogiri::HTML.parse(response)
response = Iconv.conv(&ldquo;utf-8&rdquo;, &ldquo;gb2312&rdquo;, response)
puts respons
```
执行结果：</p>

<p>  ?7?4  cache_spider git:(master) ?7?1 ruby temp.rb
  temp.rb:11:in <code>conv': "\xF8?0?0\xB5?0?4\xB4?0?2?0?7\xC3档)\r\n\r\n\r\n"... (Iconv::IllegalSequence) from temp.rb:11:in</code><main>'</p>

<p>法二、直接猜编码为utf-8</p>

<p>```ruby</p>

<h1>省略url前代码</h1>

<p>response = open(url).read
response = Nokogiri::HTML.parse(response,nil,&ldquo;utf-8&rdquo;)
puts response
```
能输出HTML，但基本乱码，类似：</p>

<p>  <p>?0?6?0?8?0?5°?0?9?0?8model?0?0?0?6?0?2?0?1?0?6?0?3?0?0?0?8?0?6?0?3?0?0±?0?8?0?5?0?1¨?0?1?0?5?0?4?0?7?0?0?0?2migration?0?8?0?7?0?8?0?8?0?3?0?0?0?5?0?1?0?7?0?7?0?9?0?9ruby-china?0?8?0?2?0?8 ?0?7?0?0?0?5?0?2ó?0?0?0?4?0?6?0?1?0?2?0?5?0?5ù?0?4?0?7?0?6?0?4?0?1?0?4?0?5¨?0?6?0?4?0?8?0?5?0?6?0?6?0?7?0?9?0?8±?0?3á±?0?6?0?5?0?3?0?0é·?0?6?0?5?0?1?0?3?0?1?0?8?0?5·?0?3?0?8?0?5model?0?8?0?7?0?2?0?3?0?8?0?8?0?3?0?5?0?7?0?3?0?8?0?5?0?0?0?3?0?3?0?6?0?2?0?7?0?8?0?2model?0?0í?0?4?0?7?0?9?0?9before_create?0?5?0?1?0?6?0?3?0?2ó?0?8?0?9?0?4?0?4rake db:s&hellip;  </p></p>

<p>法三、直接猜编码为utf-8
```ruby</p>

<h1>省略url前代码</h1>

<p>response = open(url)
response = Nokogiri::HTML.parse(response,nil,&ldquo;gb2312&rdquo;)</p>

<h1>response = Nokogiri::HTML.parse(response)</h1>

<h1>response = Iconv.conv(&ldquo;utf-8&rdquo;, response.meta_encoding, response)</h1>

<p>puts response
```
输出：</p>

<p> ?7?4  cache_spider git:(master) ?7?1 ruby temp.rb
 output error : unknown encoding gb2312</p>

<p>法四、试了以上3种方法都失败后，我才想自己处理编码。
```ruby
def convert_encoding(source_encoding, destination_encoding, str)
  ec = Encoding::Converter.new(source_encoding, destination_encoding)
  begin</p>

<pre><code>ec.convert(str)
</code></pre>

<p>  rescue Encoding::UndefinedConversionError</p>

<pre><code>p $!.error_char.dump
p $!.error_char.encoding
</code></pre>

<p>  rescue Encoding::InvalidByteSequenceError</p>

<pre><code>p $!
p $!.error_bytes.dump  if $!.error_bytes
p $!.readagain_bytes.dump if $!.readagain_bytes
</code></pre>

<p>  end
  str
end
<code>
试了gbk, utf-8, gb2312各种组合，都不完美。
</code>ruby
html = open(url).read
html.force_encoding(&ldquo;gbk&rdquo;)
html.encode!(&ldquo;utf-8&rdquo;)
doc = Nokogiri::HTML.parse html
doc.css(&ldquo;body&rdquo;)
```</p>

<p>判断一个段文本是否是UTF-8编码：</p>

<p><code>ruby
class String  
 def utf8?    
　　　unpack('U*') rescue return false    
 　　true    
　end  
end  
</code></p>

<p>哈希数组排序
test.sort_by {|t| t[:x]}.inject([]) {|r,h| r&lt;&lt;h if !r.last||r.last[:x]!=h[:x]; r}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 编程风格介绍]]></title>
    <link href="http://tianshuai.github.io/blog/2013/03/28/ruby-bian-cheng-feng-ge-jie-shao/"/>
    <updated>2013-03-28T14:33:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/03/28/ruby-bian-cheng-feng-ge-jie-shao</id>
    <content type="html"><![CDATA[<p>学习一门新的语言时，要先养成好的编程风格，然后将这种风格应用到coding中，慢慢地成为习惯。</p>

<p>本页用于介绍 Ruby 社区首推的代码编写风格，本文翻译来自： <a href="https://github.com/bbatsov/ruby-style-guide">https://github.com/bbatsov/ruby-style-guide</a>
目录</p>

<pre><code>格式，文件格式
语法
命名
注释
注解
类相关
异常
集合
字符串
正则表达式
百分号
元编程
杂项
</code></pre>

<p>The Ruby Style Guide</p>

<p>This Ruby style guide recommends best practices so that real-world Ruby programmers can write code that can be maintained by other real-world Ruby programmers. A style guide that reflects real-world usage gets used, and a style guide that holds to an ideal that has been rejected by the people it is supposed to help risks not getting used at all – no matter how good it is.</p>

<p>The guide is separated into several sections of related rules. I&rsquo;ve tried to add the rationale behind the rules (if it&rsquo;s omitted I&rsquo;ve assumed that is pretty obvious).</p>

<p>I didn&rsquo;t come up with all the rules out of nowhere &ndash; they are mostly based on my extensive career as a professional software engineer, feedback and suggestions from members of the Ruby community and various highly regarded Ruby programming resources, such as &ldquo;Programming Ruby 1.9&rdquo; and &ldquo;The Ruby Programming Language&rdquo;.</p>

<p>The guide is still a work in progress &ndash; some rules are lacking examples, some rules don&rsquo;t have examples that illustrate them clearly enough. In due time these issues will be addressed &ndash; just keep them in mind for now.
格式, 文件格式</p>

<!--more-->


<pre><code>使用 UTF-8 作为文件的编码。

缩进使用 两个空格，别用 Tab 格式，Tab将会导致到了其他环境排版混乱。

使用 Unix 的换行格式， (Linux/OSX 用户默认就是这样的，Windows 用户这里要多加注意)

    如果你在 Windows 下面，并且使用 Git，可以用下面的方式做调整：

    $ git config --global core.autocrlf true

在逗号，分号，冒号，运算符号的左右留下一个空格。
</code></pre>

<p>```ruby</p>

<pre><code>sum = 1 + 2
a, b = 1, 2
1 &gt; 2 ? true : false; puts 'Hi'
[1, 2, 3].each { |e| puts e }
</code></pre>

<p>```
唯一的例外是当你在做指数运算的时候，比如：</p>

<p>```ruby</p>

<h1>不好的</h1>

<p>e = M * c ** 2</p>

<h1>好的</h1>

<p>e = M * c**2
```</p>

<p>(, [ 的后面，或 ], ) 的前面别敲空格。</p>

<p>some(arg).other
[1, 2, 3].length</p>

<p>when 和 case相同缩进。我知道很多人不赞同这点，但这是 &ldquo;The Ruby Programming Language&rdquo; and &ldquo;Programming Ruby"两本书共同沿袭的风格。</p>

<p>```ruby</p>

<pre><code>case
when song.name == 'Misty'
  puts 'Not again!'
when song.duration &gt; 120
  puts 'Too long!'
when Time.now.hour &gt; 21
  puts "It's too late"
else
  song.play
end

kind = case year
       when 1850..1889 then 'Blues'
       when 1890..1909 then 'Ragtime'
       when 1910..1929 then 'New Orleans Jazz'
       when 1930..1939 then 'Swing'
       when 1940..1950 then 'Bebop'
       else 'Jazz'
       end
</code></pre>

<p>```
用空行来分割def以及方法中的逻辑段。</p>

<p>```ruby</p>

<pre><code>def some_method
  data = initialize(options)

  data.manipulate!

  data.result
end

def some_method
  result
end
</code></pre>

<p>```</p>

<pre><code>如果方法的参数出现在多行，则将它们对齐。
</code></pre>

<p>```ruby</p>

<pre><code># 开始时是这样（太长了）
def send_mail(source)
  Mailer.deliver(to: 'bob@example.com', from: 'us@example.com', subject: 'Important message', body: source.text)
end

# 不好的（普通缩进）
def send_mail(source)
  Mailer.deliver(
    to: 'bob@example.com',
    from: 'us@example.com',
    subject: 'Important message',
    body: source.text)
end

# 不好的（双倍缩进）
def send_mail(source)
  Mailer.deliver(
      to: 'bob@example.com',
      from: 'us@example.com',
      subject: 'Important message',
      body: source.text)
end

# 好的
def send_mail(source)
  Mailer.deliver(to: 'bob@example.com',
                 from: 'us@example.com',
                 subject: 'Important message',
                 body: source.text)
end
</code></pre>

<p>```
使用RDoc以及它的约定来写API文档，并且不要在注释块与def中加入空行。*</p>

<p>保持一行的长度小于80个字符。*</p>

<p>Emacs用户可以将如下内容加入配置中*</p>

<p>(e.g. ~/.emacs.d/init.el)：</p>

<p>(setq whitespace-line-count 80</p>

<pre><code>  whitespace-style '(lines))
</code></pre>

<p>Vim用户可以将如下内容加入配置中
(e.g. ~/.vimrc)：</p>

<pre><code>```vim
" VIM 7.3+ has support for highlighting a specified column.
if exists('+colorcolumn')
    set colorcolumn=80
else
    " Emulate
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%80v.\+', -1)
endif
```
</code></pre>

<p>Textmate</p>

<p>避免行尾空白符。</p>

<p>Emacs用户可以将如下内容加入配置中(最好是接在上面的例子之后)：</p>

<p>(setq whitespace-style &lsquo;(trailing space-before-tab</p>

<pre><code>                     indentation space-after-tab))
</code></pre>

<p>Vim用户可以将以下内容添加至~/.vimrc：</p>

<p>autocmd BufWritePre * :%s/\s+$//e</p>

<p>如果你不希望Vim破坏一些基于空格符的文件，你可以这样做：</p>

<p>set listchars+=trail:░</p>

<p>如果你不喜欢上面的建议，你也可以使用其它的字符来代替上面的。</p>

<p>Textmate用户可以看一下 Uber Glory bundle.</p>

<p>Syntax</p>

<p>在有参数时为def加上括号，在方法不接受任何参数时省略括号。
```ruby</p>

<pre><code>def some_method
  # body omitted
end

def some_method_with_arguments(arg1, arg2)
  # body omitted
end
</code></pre>

<p>```
不要使用for，除非你很清楚为什么需要这么做。绝大多数情况下都可以使用each来代替for。要注意的是，for不会开启一个新的作用域（正好与each相反），在其中定义的变量在其外是可见的。</p>

<p>```ruby</p>

<pre><code>arr = [1, 2, 3]

# 不好的
for elem in arr do
  puts elem
end

# 好的
arr.each { |elem| puts elem }

不要在跨行的if/unless中使用then。

# 不好的
if some_condition then
  # body omitted
end

# 好的
if some_condition
  # body omitted
end
</code></pre>

<p><code>
使用条件运算符而不是if/then/else/end，它们最通用并且更简洁。
</code>ruby</p>

<pre><code># 不好的
result = if some_condition then something else something_else end

# 好的
result = some_condition ? something : something_else

在条件运算符中确保每个分支只包含一个表达式。即条件运算符在使用时不要嵌套，这种时候if/else是更好的选择。

# 不好的
some_condition ? (nested_condition ? nested_something : nested_something_else) : something_else

# 好的
if some_condition
  nested_condition ? nested_something : nested_something_else
else
  something_else
end
</code></pre>

<p><code>
不要使用if x: ...，它在Ruby 1.9中被移除了，使用条件运算符代替。
</code>ruby</p>

<pre><code># 不好的
result = if some_condition: something else something_else end

# 好的
result = some_condition ? something : something_else
</code></pre>

<p>```
在单行使用when时使，用when x then &hellip;，另一个语法when x: &hellip;在Ruby 1.9中被移除了。</p>

<p>不要使用when x: &hellip;，原因看上一条。</p>

<p>在布尔表达式中使用&amp;&amp;/||，在流程控制时使用and/or（如果你在使用时发现需要添加额外的括号来表达逻辑，这说明你很可能用错了运算符）。
```ruby</p>

<pre><code># 布尔表达式
if some_condition &amp;&amp; some_other_condition
  do_something
end

# 流程控制
document.saved? or document.save!
</code></pre>

<p>```
语句跨行时不要使用?:（条件运算符），使用if/unless替代。</p>

<p>在执行体仅有一行的情况下使用作为修饰符形式的if/unless。另一个选择是使用and/or来做流程控制。</p>

<p>```ruby</p>

<pre><code># 不好的
if some_condition
  do_something
end

# 好的
do_something if some_condition

# 另一个好的选择
some_condition and do_something
</code></pre>

<p><code>
在表示否定语义时使用unless而不是if（或者可以使用or做流程控制）。
</code>ruby</p>

<pre><code># 不好的
do_something if !some_condition

# 好的
do_something unless some_condition

# 另一个好的选择
some_condition or do_something
</code></pre>

<p>```
不要将unless与else一起使用，将其的语义重写为肯定形式。</p>

<p>```ruby</p>

<pre><code># 不好的
unless success?
  puts 'failure'
else
  puts 'success'
end

# 好的
if success?
  puts 'success'
else
  puts 'failure'
end
</code></pre>

<p>```
不要在if/unless/while之后使用括号，除非条件中包含了赋值操作（参看下方关于使用=返回结果的部分）。</p>

<p>```ruby</p>

<pre><code># 不好的
if (x &gt; 10)
  # body omitted
end

# 好的
if x &gt; 10
  # body omitted
end

# 好的
if (x = self.next_value)
  # body omitted
end
</code></pre>

<p>```
在使用DSL（如Rake，Rails，RSpec）定义的方法，以及Ruby中看起来像关键字的方法时（如attr_reader，puts，属性的访问）忽略其参数两边的括号。其它的情况下则使用括号将参数包裹起来。</p>

<p>```ruby</p>

<pre><code>class Person
  attr_reader :name, :age

  # omitted
end

temperance = Person.new('Temperance', 30)
temperance.name

puts temperance.age

x = Math.sin(y)
array.delete(e)
</code></pre>

<p>```
在代码块只有一行的情况下使用{&hellip;}而不是do&hellip;end。避免在代码块跨行时使用{&hellip;}（同样避免跨行时进行链式调用，如下方代码中最后一例）。在流程控制及方法定义（如Rakefiles或其它DSL）时使使用do&hellip;end。不在链式调用时使用do&hellip;end。</p>

<p>```ruby</p>

<pre><code>names = ["Bozhidar", "Steve", "Sarah"]

# 好的
names.each { |name| puts name }

# 不好的
names.each do |name|
  puts name
end

# 好的
names.select { |name| name.start_with?("S") }.map { |name| name.upcase }

# 不好的
names.select do |name|
  name.start_with?("S")
end.map { |name| name.upcase }
</code></pre>

<p>```
有些人可能认为在跨行进行链式调用时使用{&hellip;}是可行的，但是他们需要问问自己的是 &ndash; 这样的代码是否真的具有良好的可读性 and can&rsquo;t the blocks contents be extracted into nifty methods。</p>

<p>在不必要的情况下，避免显示的使用return进行返回。
```ruby</p>

<pre><code># 不好的
def some_method(some_arr)
  return some_arr.size
end

# 好的
def some_method(some_arr)
  some_arr.size
end
</code></pre>

<p>```</p>

<pre><code>在设置具有默认值的参数时，在=两边添加空格。
</code></pre>

<p>```ruby</p>

<pre><code># 不好的
def some_method(arg1=:default, arg2=nil, arg3=[])
  # do something...
end

# 好的
def some_method(arg1 = :default, arg2 = nil, arg3 = [])
  # do something...
end
</code></pre>

<p>```
有些Ruby书籍提倡使用第一种风格，但是第二种在实际使用时往往具表现得更好（有些证据可以证明它们具有更好的可读性）。</p>

<p>在不必要的情况下，不使用行连接符（\），实际上，在任何情况下都不需要使用它们。
```ruby</p>

<pre><code># 不好的
result = 1 - \
         2

# 好的（但其实还是很糟糕）
result = 1 \
         - 2
</code></pre>

<p><code>
使用=（赋值符号）的返回作为表达式的值是可以的，但是记得在记得在两边加上括号。
</code>ruby</p>

<pre><code># 好的 - 表明了赋值的意图
if (v = array.grep(/foo/)) ...

# 不好的
if v = array.grep(/foo/) ...

# 好的 - 不仅表明了赋值，还表明了正确的优先级
if (v = self.next_value) == "hello" ...
</code></pre>

<p><code>
尽可能的使用||=来初始化变量。
</code>ruby</p>

<pre><code># 如果name的值为nil或false，则将name的值设为Bozhidar，否则将name的值设为name本身的值（即不进行赋值）。
name ||= 'Bozhidar'

不要在初始化布尔型变量时使用||=（想想如果变量本身的值是false是会是什么情况）。

# 不好的 - 会将enabled设为true，即使enabled本身的值是false。
enabled ||= true

# 好的
enabled = true if enabled.nil?
</code></pre>

<p><code>
避免使用Perl风格的特殊变量（如$0-9，$`等）。它们看起来很神秘，不鼓励在除了单行脚本以外的地方使用它们。
在调用方法时，永远不要在方法名和开括号之间添加空格。
</code>ruby</p>

<pre><code># 不好的
f (3 + 2) + 1

# 好的
f(3 + 2) + 1
</code></pre>

<p>```
如果方法的第一个参数以开括号打头，则在调用时总是使用括号包裹全部参数，如f((3 + 2) + 1)。</p>

<p>在使用Ruby解释器时总是为其添加-w参数，它可以提醒你以上的规则！</p>

<p>当Hash的键为Symbol时，使用Ruby 1.9的字面量语法来表示。
```ruby</p>

<pre><code># 不好的
hash = { :one =&gt; 1, :two =&gt; 2 }

# 好的
hash = { one: 1, two: 2 }
</code></pre>

<p><code>
使用最新的lambda字面量语法。
</code>ruby</p>

<pre><code># 不好的
lambda = lambda { |a, b| a + b }
lambda.call(1, 2)

# 好的
lambda = -&gt;(a, b) { a + b }
lambda.(1, 2)
</code></pre>

<p><code>
使用_来表示无用的代码块参数。
</code>ruby</p>

<pre><code># 不好的
result = hash.map { |k, v| v + 1 }

# 好的
result = hash.map { |_, v| v + 1 }
</code></pre>

<p>```
命名</p>

<pre><code>The only real difficulties in programming are cache invalidation and
naming things. 
-- Phil Karlton

方法及变量名使用诸如snake_case的形式。
类及模块名使用诸如CamelCase的形式（保持HTTP，RFC，XML等采用首字母缩写表示的单词为全部大写的形式）。
其它常量名使用诸如SCREAMING_SNAKE_CASE的形式。
在表示断言的方法名（返回真或者假）的末尾添加一个问号（如Array#empty?）。
可能会造成潜在“危险”的方法名（如修改self或者在原处修改变量的方法，exit!等）应该在末尾添加一个感叹号。
在较短的代码块中使用reduce时，为其参数起名为|a, e|（）When using reduce with short blocks, name the arguments |a, e| (accumulator, element)。
</code></pre>

<p>在定义二元操作符方法时，将其的参数取名为other。
```ruby</p>

<pre><code>def +(other)
  # body omitted
end
</code></pre>

<p>```</p>

<pre><code>map优先于collect，find优先于detect，select优先于find_all，
reduce优先于inject，size优先于length。以上的规则并不绝定，如果
使用后者能提高代码的可读性，那么尽管使用它们。押韵的方法名（如collect，
detect，inject）继承于SmallTalk语言，它们在其它语言中并不是很通用。
鼓励使用select而不是find_all是因为select与reject一同使用时很不错，
并且它的名字具有很好的自解释性。
</code></pre>

<p>注释</p>

<pre><code>Good code is its own best documentation. As you're about to add a
comment, ask yourself, "How can I improve the code so that this
comment isn't needed?" Improve the code and then document it to make
it even clearer. 
-- Steve McConnell

写出可以“自解释”的代码，然后忽略后面的内容，这不是在开玩笑！
Comments longer than a word are capitalized and use punctuation. Use one space after periods.

避免无意义的注释。
</code></pre>

<p>```ruby</p>

<pre><code># 不好的
counter += 1 # increments counter by one
</code></pre>

<p>```</p>

<pre><code>时常更新现有的注释。没有注释优于过时的注释。

不要为糟糕的代码写注释。重构它们，使它们能够“自解释”。(Do or do not - there is no try.)
</code></pre>

<p>注解</p>

<pre><code>代码的注解应该总是写在被注释代码的上面, 并且紧贴被注释代码.
注解的标题应该紧跟一个冒号以及一个空格, 用来突出显示该注释描述的内容.

如果需要多行注释, 第二行注释应该在#之后缩进两个空格.(译者注: 以上两条规则在Ruby源码中都不多看到, 前者在Lisp源码较多见, 而后者从没见过)
</code></pre>

<p>```ruby</p>

<pre><code>def bar
  # FIXME: This has crashed occasionally since v3.2.1. It may
  #   be related to the BarBazUtil upgrade.
  baz(:quux)
end
</code></pre>

<p>```</p>

<pre><code>如果代码很直白, 添加注解就显得多余, 也可以在代码所在行的尾部提供简短的注解说明.不过这应该在很少的情况下使用, 并且不被提倡.
</code></pre>

<p><code>ruby
def bar
  sleep 100 # OPTIMIZE
end
</code></p>

<pre><code>使用TODO标题描述 漏掉的功能或打算加入的新特性
使用FIXME标题描述 需要被修复的有问题代码
使用OPTIMIZE标题描述 可能有性能瓶颈, 需要优化的代码.
使用HACK标题描述 感觉上需要重构的代码
使用REVIEW标题描述 关键性代码, 需要稍后不断的检查该代码是否工作正确.
只要对阅读代码有帮助, 也可以使用其他直白的注解标题, 但记得在README中注明.
</code></pre>

<p>类相关</p>

<pre><code>当设计一个类时, 务必记住LSP原则.(译者注: LSP原则大概含义为: 如果一个函数中引用了`父类的实例', 则一定可以使用其子类的实例替代, 并且函数的基本功能不变. (虽然功能允许被扩展)
尽量使你的类更加健壮, 稳固.

为你自己的类定义to_s方法, 用来表现这个类实例对象的字符化表现形式.
</code></pre>

<p>```ruby</p>

<pre><code>class Person
  attr_reader :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  def to_s
    "#@first_name#@last_name"
  end
end
</code></pre>

<p>```</p>

<pre><code>尽量使用attr来定义属性访问器或修改器方法.
</code></pre>

<p>```ruby</p>

<pre><code># bad
class Person
  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  def first_name
    @first_name
  end

  def last_name
    @last_name
  end
end

# good
class Person
  attr_reader :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end
end
</code></pre>

<p>```</p>

<pre><code>考虑添加工厂方法, 用以灵活的创建一个特定类的实例.
</code></pre>

<p>```ruby</p>

<pre><code>class Person
  def self.create(options_hash)
    # body omitted
  end
end
</code></pre>

<p>```</p>

<pre><code>Ruby的基本价值观之一: duck-typing优先于继承.
</code></pre>

<p>```ruby</p>

<pre><code># bad
class Animal
  # abstract method
  def speak
  end
end

# extend superclass
class Duck &lt; Animal
  def speak
    puts 'Quack! Quack'
  end
end

# extend superclass
class Dog &lt; Animal
  def speak
    puts 'Bau! Bau!'
  end
end

# good
class Duck
  def speak
    puts 'Quack! Quack'
  end
end

class Dog
  def speak
    puts 'Bau! Bau!'
  end
end
</code></pre>

<p>```</p>

<pre><code>应该总是避免使用类变量.
</code></pre>

<p>```ruby</p>

<pre><code>class Parent
  @@class_var = 'parent'

  def self.print_class_var
    puts @@class_var
  end
end

class Child &lt; Parent
  @@class_var = 'child'
end

Parent.print_class_var # =&gt; will print "child"
</code></pre>

<p>```</p>

<pre><code>正如上例看到的, 所有的类实例共享类变量, 并且可以直接修改类变量,此时使用类实例变量是更好的主意.

总是为类的实例方法定义适当的可见性.(private, protected, private), 不应该总是使用public (默认可见性为public), 这不是Python!

可见性关键字应该和方法定义有相同的缩进, 并且不同的关键字之间要空行分隔.
</code></pre>

<p>```ruby</p>

<pre><code>class SomeClass
  def public_method
    # ...
  end

  private
  def private_method
    # ...
  end
end
</code></pre>

<p>```</p>

<pre><code>总是使用self来定义单例方法. 当代码重构时, 这将使得方法定义代码更加具有灵活性.
</code></pre>

<p>```ruby</p>

<pre><code>class TestClass
  # bad
  def TestClass.some_method
    # body omitted
  end

  # good
  def self.some_other_method
    # body omitted
  end

  # Also possible and convenient when you
  # have to define many singleton methods.
  class &lt;&lt; self
    def first_method
      # body omitted
    end

    def second_method_etc
      # body omitted
    end
  end
end
</code></pre>

<p>```
异常处理</p>

<pre><code>尽量不要抑制异常被正常抛出.
</code></pre>

<p>```ruby</p>

<pre><code>begin
  # an exception occurs here
rescue SomeError
  # the rescue clause does absolutely nothing
end
</code></pre>

<p>```</p>

<pre><code>不要使用异常来代替流程控制语句.
</code></pre>

<p>```ruby</p>

<pre><code># bad
begin
  n / d
rescue ZeroDivisionError
  puts "Cannot divide by 0!"
end

# good
if n.zero?
  puts "Cannot divide by 0!"
else
  n / d
</code></pre>

<p>```</p>

<pre><code>应该总是避免拦截最顶级的Exception异常类.
</code></pre>

<p>```ruby</p>

<pre><code># bad 
begin
  # an exception occurs here
rescue
  # exception handling
end

# still bad
begin
  # an exception occurs here
rescue Exception
  # exception handling
end
</code></pre>

<p>```</p>

<pre><code>将更具体(或特殊的)的异常处理代码放在通用的异常处理代码之前.
否则, 这些异常处理代码永远不会被处理.
</code></pre>

<p>```ruby</p>

<pre><code># bad
begin
  # some code
rescue Exception =&gt; e
  # some handling
rescue StandardError =&gt; e
  # some handling
end

# good
begin
  # some code
rescue StandardError =&gt; e
  # some handling
rescue Exception =&gt; e
  # some handling
end
</code></pre>

<p>```</p>

<pre><code>使用ensure语句, 来确保总是执行一些特地的操作.
</code></pre>

<p>```ruby</p>

<pre><code>f = File.open("testfile")
begin
  # .. process
rescue
  # .. handle error
ensure
  f.close unless f.nil?
end
</code></pre>

<p>```</p>

<pre><code>除非必要, 尽可能使用Ruby现有的异常类. (而不是总派生自己的异常类)
</code></pre>

<p>集合</p>

<pre><code>总是使用%w的方式来定义字符串数组.(译者注: w表示英文单词word, 而且定义之间千万不能有逗号)
</code></pre>

<p>```ruby</p>

<pre><code># bad
STATES = ['draft', 'open', 'closed']

# good
STATES = %w(draft open closed)
</code></pre>

<p>```</p>

<pre><code>避免直接引用靠后的数组元素, 这样隐式的之前的元素都被赋值为nil.
</code></pre>

<p>```ruby</p>

<pre><code>arr = []
arr[100] = 1 # now you have an array with lots of nils
</code></pre>

<p>```</p>

<pre><code>如果要确保元素唯一, 则使用Set代替Array.Set更适合于无顺序的, 并且元素唯一的集合, 集合具有类似于数组一致性操作以及哈希的快速查找.

尽可能使用hash代替字符串作为哈希键.
</code></pre>

<p>```ruby</p>

<pre><code># bad
hash = { 'one' =&gt; 1, 'two' =&gt; 2, 'three' =&gt; 3 }

# good
hash = { one: 1, two: 2, three: 3 }
</code></pre>

<p>```</p>

<pre><code>避免使用易变对象作为哈希键.

应该尽可能的使用Ruby1.9的新哈希语法.
</code></pre>

<p>```ruby</p>

<pre><code># bad
hash = { :one =&gt; 1, :two =&gt; 2, :three =&gt; 3 }

# good
hash = { one: 1, two: 2, three: 3 }
</code></pre>

<p>```</p>

<pre><code>记住, 在Ruby1.9中, 哈希的表现不再是无序的. (译者注: Ruby1.9将会记住元素插入的序列)

当遍历一个集合的同时, 不要修改这个集合.
</code></pre>

<p>字符串</p>

<pre><code>优先使用字符串插值来代替字符串串联.
</code></pre>

<p>```ruby</p>

<pre><code># bad
email_with_name = user.name + ' &lt;' + user.email + '&gt;'

# good
email_with_name = "#{user.name} &lt;#{user.email}&gt;"
</code></pre>

<p>```</p>

<pre><code>当不需要使用字符串插值或某些特殊字符时, 应该优先使用单引号.
</code></pre>

<p>```ruby</p>

<pre><code># bad
name = "Bozhidar"

# good
name = 'Bozhidar'
</code></pre>

<p>```</p>

<pre><code>当使用字符串插值替换实例变量时, 应该省略{}.
</code></pre>

<p>```ruby</p>

<pre><code>class Person
  attr_reader :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  # bad
  def to_s
    "#{@first_name}#{@last_name}"
  end

  # good
  def to_s
    "#@first_name#@last_name"
  end
end
</code></pre>

<p>```</p>

<pre><code>操作较大的字符串时, 避免使用+, 如果需要修改被操作字符串, 应该总是使用&lt;&lt;作为代替.
</code></pre>

<p>```ruby</p>

<pre><code># good and also fast
html = ''
html &lt;&lt; '&lt;h1&gt;Page title&lt;/h1&gt;'

paragraphs.each do |paragraph|
  html &lt;&lt; "&lt;p&gt;#{paragraph}&lt;/p&gt;"
end
</code></pre>

<p>```
正则表达式</p>

<pre><code>如果只是需要查找普通字符串, 不要使用RE. 例如: string['text'] (译者注: 示例什么意思?)

针对简单的结构, 你可以直接使用string[/RE/]的方式来查询. (译者注: string[]难道是新添加的语法?)

match = string[/regexp/]             # get content of matched regexp
first_group = string[/text(grp)/, 1] # get content of captured group
string[/text (grp)/, 1] = 'replace'  # string =&gt; 'text replace'

当无需引用分组内容时, 应该使用(?:RE)代替(RE). (会提高性能)

/(first|second)/   # bad
/(?:first|second)/ # good

避免使用$1-$9风格的分组引用, 而应该使用1.9新增的命名分组来代替.
</code></pre>

<p>```ruby</p>

<pre><code># bad
/(regexp)/ =~ string
...
process $1

# good
/(?&lt;meaningful_var&gt;regexp)/ =~ string
...
process meaningful_var
</code></pre>

<p>```</p>

<pre><code>有关RE集合[...], 他们只有以下几个特殊关键字值得注意: ^, -, \, ], 所以, 不要在集合中, 转义.或者[, 他们是正常字符.

注意, ^和$, 他们匹配行首和行尾, 而不是一个字符串的结尾, 如果你想匹配整个字符串, 用\A和\E. (译者注, A和Z分别为英文的第一个和最后一个字符)

string = "some injection\nusername"
string[/^username$/]   # matches
string[/\Ausername\Z/] # don't match

使用x修饰符来匹配复杂的表达式, 这将使得RE更具可读性, 你可以添加一些有用的注释.
注意, 所有空格将被忽略.

regexp = %r{
  start         # some text
  \s            # white space char
  (group)       # first group
  (?:alt1|alt2) # some alternation
  end
}x

gusb和sub也支持哈希以及代码块形式语法, 可用于复杂情形下的替换操作.
百分号

应该大量的使用%w.

应该使用%()的方式, 来定义需要字符串插值以及包含"符号的单行字符串.多行字符串, 尽量使用here doc格式. (译者注: 我好喜欢%()的方式, 可能是%()比%{}写起来方便的缘故)

# bad (no interpolation needed)
%(&lt;div class="text"&gt;Some text&lt;/div&gt;)
# should be '&lt;div class="text"&gt;Some text&lt;/div&gt;'

# bad (no double-quotes)
%(This is #{quality} style)
# should be "This is #{quality} style"

# bad (multiple lines)
%(&lt;div&gt;\n&lt;span class="big"&gt;#{exclamation}&lt;/span&gt;\n&lt;/div&gt;)
# should be a heredoc.

# good (requires interpolation, has quotes, single line)
%(&lt;tr&gt;&lt;td class="name"&gt;#{name}&lt;/td&gt;)

使用%r的方式定义包含多个/符号的正则表达式.

# bad
%r(\s+)

# still bad
%r(^/(.*)$)
# should be /^\/(.*)$/

# good
%r(^/blog/2011/(.*)$)

尽量避免%q, %Q, %x, %s, 和%W.

优先使用()作为%类语法格式的分隔符.(译者注, 本人很喜欢%(...), 不过Programming Ruby中, 显然更喜欢使用%{}的方式)
</code></pre>

<p>元编程</p>

<pre><code>在写自己的库时, 不要进行不必要的元编程(例如修改核心库, 不需要给他们猴子补丁).
</code></pre>

<p>杂项</p>

<pre><code>总是打开Ruby -w开关. 应该写没有警告提示的代码.
通常情况下, 尽量避免使用哈希作为方法参数. (此时应该考虑这个方法是不是功能太多?)
避免一个方法内容超过10行代码, 理想情况下, 大多数方法内容应该少于5行.(不算空行)
尽量避免方法的参数超过三个.
有时候, 必须用到全局方法, 应该增加这些方法到Kernel模块.

尽可能使用类实例变量代替全局变量. (译者注:是类实例变量, 而不是类的实例变量. 汗~~)
</code></pre>

<p>```ruby</p>

<pre><code>#bad
$foo_bar = 1

#good
class Foo
  class &lt;&lt; self
    attr_accessor :bar
  end
end

Foo.bar = 1
</code></pre>

<p>```</p>

<pre><code>尽可能的使用alias_method 代替 alias.

使用OptionParser来解析复杂的命令行选项, 较简单的命令行, -s参数即可处理.

按照功能来编写方法, 当方法名有意义时, 应该避免方法功能被唐突的改变.

避免不需要的元编程.

除非必要, 避免更改已经定义的方法的参数.

避免超过三级的代码块嵌套.

应该持续性的遵守以上指导方针.

尽量使用(生活中的)常识.
</code></pre>

<p>转载自：<a href="http://ruby-china.org/wiki/coding-style">http://ruby-china.org/wiki/coding-style</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nokogiri抓取失败后重试代码]]></title>
    <link href="http://tianshuai.github.io/blog/2013/03/28/nokogirizhua-qu-shi-bai-hou-zhong-shi-dai-ma/"/>
    <updated>2013-03-28T13:58:00+08:00</updated>
    <id>http://tianshuai.github.io/blog/2013/03/28/nokogirizhua-qu-shi-bai-hou-zhong-shi-dai-ma</id>
    <content type="html"><![CDATA[<p>非常喜欢Nokogiri的简洁，尤其是根据css和xpath查找元素。有时又觉得Nokogiri太简洁了，连抓取失败重试的机制都没有。可惜在景德镇，网络经常丢包，真是郁闷。
所以写这段代码，以后肯定常用。</p>

<p><code>ruby
begin
  doc = Nokogiri::HTML(open(url).read.strip)
rescue Exception =&gt; ex
  log.error "Error: #{ex}"
  retry
end
</code>
Tips: retry可以跳回begin
这段代码将打印log并一直重试直到成功。估计这样写不大合适，因为一旦发生一个小错误，将会导致死循环。比较好的做法是，循环10次，如果都失败就放弃。</p>

<p>```ruby</p>

<h1>定义常量，最多循环10次</h1>

<p>MAX_ATTEMPTS = 10</p>

<p>doc = nil
begin
  doc = Nokogiri::HTML(open(url).read.strip)
rescue Exception => ex
  log.error &ldquo;Error: #{ex}&rdquo;
  attempts = attempts + 1
  retry if(attempts &lt; MAX_ATTEMPTS)
end</p>

<p>if(doc.nil?)
  # 尝试10次后都失败，在这里处理一下。
  # 以免后面处理doc时抛空指针异常
end
```
原文链接：<a href="http://rubyer.me/blog/537/">http://rubyer.me/blog/537/</a></p>
]]></content>
  </entry>
  
</feed>
